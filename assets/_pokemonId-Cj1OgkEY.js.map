{"version":3,"file":"_pokemonId-Cj1OgkEY.js","names":["ForwardRef","SparklesIcon","ForwardRef","StarIcon","ForwardRef","useNavigate","useSearch","orderSearchParams","PokemonDetailsParams","pokemonDetailsUrl","searchParamOrder","usePokemonDetailsParam","key","$","_c","t0","Symbol","for","from","navigate","t1","select","search","undefined","value","t2","value_0","to","prev","versionGroup","replace","resetScroll","viewTransition","mask","prev_0","isDexEntriesPanelOpen","isLearnsetPanelOpen","isLocationsPanelOpen","setValue","t3","const","playAudio","src","volume","Number","localStorage","getItem","isMuted","audio","Audio","play","stop","pause","currentTime","ForwardRef","getRouteApi","StarIcon","StarIconSolid","StarIconOutline","useStarredPokemon","Button","route","StarButton","$","_c","pokemonId","useParams","starredPokemonIds","toggleStarredPokemonIds","t0","includes","Number","isStarred","t1","t2","t3","t4","BackButton","StarButton","TopButtons","$","_c","t0","Symbol","for","useState","Loader","ImageProps","src","alt","PokemonImage","t0","$","_c","isLoadingImage","setIsLoadingImage","t1","undefined","t2","t3","Symbol","for","t4","t5","t6","t7","PokemonName","t0","$","_c","name","t1","split","join","t2","SparklesIcon","SparklesIconSolid","SparklesIconOutline","Button","ButtonProps","displayShiny","setDisplayShiny","ToggleShinyButton","t0","$","_c","t1","t2","t3","Genus","PokemonCategory","t0","$","_c","category","t1","genus","t2","Variety","Button","FormButtonProps","pokemonSpecies","placeholderName","currentForm","handleClick","index","PokemonFormButtons","t0","$","_c","t1","Symbol","for","t2","map","form","pokemon","name","split","join","PokemonAbility","usePokemonAbility","getIdFromUrl","capitalize","PokemonAbilityDisplay","t0","$","_c","ability","t1","url","data","abilityData","t2","name","is_hidden","t3","t4","flavor_text_entries","slice","reverse","find","_temp","flavor_text","t5","t6","entry","language","PokemonAbility","PokemonAbilityDisplay","Loader","AbilitiesProps","abilities","PokemonAbilities","t0","$","_c","t1","length","t2","t3","filter","t4","i","ability","t5","name","map","_temp","indexOf","_temp2","name_0","stats","label","color","Fragment","StatElement","stats","StatsProps","pokemonStats","PokemonStats","t0","$","_c","t1","Symbol","for","t2","map","t3","index","label","color","base_stat","backgroundColor","width","t4","reduce","_temp","t5","total","EvolutionDetail","capitalize","formatEvolutionMethod","details","length","map","detail","conditions","triggerConditions","Record","trade","shed","spin","trigger","name","push","min_level","item","held_item","gender","min_happiness","min_affection","min_beauty","known_move","known_move_type","party_species","party_type","trade_species","location","time_of_day","needs_overworld_rain","turn_upside_down","join","Chain","EvolutionDetail","getIdFromUrl","formatEvolutionMethod","ItemResource","Evolution","evolutionMethod","extractData","node","evolutionDetails","name","species","id","Number","url","getEvolutionData","chain","pokemonName","previous","next","traverse","parent","evolves_to","map","pokemon","evolution_details","forEach","child","Fragment","Link","useEvolutionChain","getEvolutionData","ItemResource","ChainProps","id","pokemonName","Evolution","evolutionMethod","pokemonEvolutionText","pokemon","pokemonId","String","name","formatNextEvolutions","pokemonList","length","slice","map","PokemonEvolutionChain","t0","$","_c","data","chain","t1","Symbol","for","t2","t3","t4","t5","t6","t7","bb0","previous","next","t8","CatchRateProps","catchRate","PokemonCatchRate","t0","$","_c","t1","Math","pow","t2","toFixed","probability","t3","t4","typeEffectiveness","Record","normal","fighting","ghost","flying","rock","bug","psychic","dark","fairy","ground","grass","electric","ice","poison","water","steel","fire","dragon","typeEffectiveness","getTypeEffectivenessData","types","multipliers","Record","categories","label","normal","weak","resistant","immune","attackingType","Object","keys","multiplier","defendingType","push","getTypeEffectivenessData","Loader","TypeDisplay","TypesProps","types","CategoryProps","title","multipliers","Record","EffectivenessCategory","t0","$","_c","t1","t2","t3","type","map","t4","PokemonTypeEffectiveness","Symbol","for","categories","Object","values","filter","_temp","t5","types_1","label","t6","types_0","length","games","Record","label","red","blue","yellow","gold","silver","crystal","ruby","sapphire","emerald","firered","leafgreen","diamond","pearl","platinum","heartgold","soulsilver","black","white","x","y","sun","moon","sword","shield","scarlet","violet","NamedAPIResource","usePokemonDetailsParam","games","capitalize","Accordion","Loader","Entry","flavor_text","language","version","EntriesProps","textEntries","flavorTextEntry","entry","name","label","FlavorTextEntries","t0","$","_c","isOpen","setIsOpen","t1","t2","t3","sortedEntries","filter","_temp","reverse","Symbol","for","length","undefined","slice","map","_temp2","t4","t5","entry_0","MoveElement","getIdFromUrl","ItemResource","Moves","label","moves","level","Learnset","Record","filterLearnsetData","currentVersionGroup","learnset","levelUpMoves","machineMoves","eggMoves","tutorMoves","forEach","move","version_group_details","vg","version_group","name","moveData","id","Number","url","level_learned_at","move_learn_method","push","sort","a","b","Link","ChevronRightIcon","useMove","ItemResource","TypeDisplay","MoveCategoryDisplay","RowProps","move","level","displayLevel","PokemonMoveTableRow","t0","$","_c","data","moveData","id","t1","String","t2","moveId","t3","t4","name","split","join","t5","t6","type","t7","damage_class","t8","power","t9","t10","accuracy","t11","t12","pp","t13","t14","Symbol","for","t15","ItemResource","PokemonMoveTableRow","MovesProps","moves","level","label","PokemonMovesTable","t0","$","_c","t1","t2","Symbol","for","t3","t10","t4","t5","t6","t7","t8","t9","t11","t12","t13","move","name","map","t14","t15","MoveElement","usePokemonDetailsParam","filterLearnsetData","versionGroups","Loader","Button","PokemonMovesTable","PokemonMoves","t0","$","_c","moves","versionGroup","setVersionGroup","currentVersionIndex","t1","Symbol","for","length","t2","t3","t4","group","some","move","version_group_details","vg","version_group","name","availableVersionGroups","Object","entries","filter","selectedVersionGroup","learnset","map","index","group_0","t5","label","undefined","values","_temp","_temp2","categoryMoves","categoryMoves_0","Encounter","PokemonEncounter","games","EncounterList","location","details","organizePokemonEncounters","encounters","groupedByVersion","Partial","Record","encounter","versionDetail","version_details","versionName","version","name","push","location_area","encounter_details","usePokemonLocations","organizePokemonEncounters","games","Loader","PokemonLocations","t0","$","_c","id","data","encounters","undefined","t1","Symbol","for","length","t2","formattedEncounters","Object","entries","filter","t3","versionName","map","t4","versionName_0","t5","label","_temp","location","split","join","useEffect","AxiosError","usePokemonDetailsParam","usePokemon","usePokemonSpecies","getIdFromUrl","capitalize","playAudio","ErrorMessage","TopButtons","PokemonImage","PokemonName","ToggleShinyButton","PokemonCategory","PokemonTypesDisplay","PokemonFormButtons","PokemonAbilities","PokemonStats","PokemonEvolutionChain","GenerationText","PokemonCatchRate","PokemonTypeEffectiveness","FlavorTextEntries","Accordion","PokemonMoves","PokemonLocations","Footer","Route","SplitComponent","displayShiny","setDisplayShiny","formIndex","setFormIndex","currentFormIndex","isLearnsetOpen","setLearnsetOpen","isLocationsOpen","setLocationsOpen","pokemonId","useParams","data","pokemonSpecies","error","errorPS","Number","pokemon","errorP","varieties","url","cries","latest","play","stop","filter","e","map","message","name","sprites","other","home","undefined","genera","find","genus","language","types","index","abilities","stats","evolution_chain","generation","capture_rate","type","flavor_text_entries","moves","component"],"sources":["../../node_modules/@heroicons/react/24/outline/esm/ChevronRightIcon.js","../../node_modules/@heroicons/react/24/outline/esm/SparklesIcon.js","../../node_modules/@heroicons/react/24/outline/esm/StarIcon.js","../../src/features/pokemon/hooks/usePokemonDetailsParam.ts","../../src/utils/playAudio.ts","../../node_modules/@heroicons/react/24/solid/esm/SparklesIcon.js","../../node_modules/@heroicons/react/24/solid/esm/StarIcon.js","../../src/features/pokemon/components/pokemonDetails/StarButton.tsx","../../src/features/pokemon/components/pokemonDetails/TopButtons.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonImage.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonName.tsx","../../src/features/pokemon/components/pokemonDetails/ToggleShinyButton.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonCategory.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonFormButtons.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonAbilityDisplay.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonAbilities.tsx","../../src/data/stats.ts","../../src/features/pokemon/components/pokemonDetails/PokemonStats.tsx","../../src/features/pokemon/utils/formatEvolutionMethod.ts","../../src/features/pokemon/utils/getEvolutionData.ts","../../src/features/pokemon/components/pokemonDetails/PokemonEvolutionChain.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonCatchRate.tsx","../../src/data/typeEffectiveness.ts","../../src/features/pokemon/utils/getTypeEffectivenessData.ts","../../src/features/pokemon/components/pokemonDetails/PokemonTypeEffectiveness.tsx","../../src/data/games.ts","../../src/features/pokemon/components/pokemonDetails/FlavorTextEntries.tsx","../../src/features/pokemon/utils/filterLearnsetData.ts","../../src/features/pokemon/components/pokemonDetails/learnset/PokemonMoveTableRow.tsx","../../src/features/pokemon/components/pokemonDetails/learnset/PokemonMovesTable.tsx","../../src/features/pokemon/components/pokemonDetails/learnset/PokemonMoves.tsx","../../src/features/pokemon/utils/organizePokemonEncounters.ts","../../src/features/pokemon/components/pokemonDetails/PokemonLocations.tsx","../../src/routes/pokemon/$pokemonId.tsx?tsr-split=component"],"sourcesContent":["import * as React from \"react\";\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m8.25 4.5 7.5 7.5-7.5 7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction SparklesIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM16.894 20.567 16.5 21.75l-.394-1.183a2.25 2.25 0 0 0-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 0 0 1.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 0 0 1.423 1.423l1.183.394-1.183.394a2.25 2.25 0 0 0-1.423 1.423Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(SparklesIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction StarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(StarIcon);\nexport default ForwardRef;","import { useNavigate, useSearch } from \"@tanstack/react-router\";\n\nimport { orderSearchParams } from \"@/utils/orderSearchParams.ts\";\nimport type { PokemonDetailsParams } from \"@/types/types.ts\";\n\nconst pokemonDetailsUrl = \"/pokemon/$pokemonId\";\n\nconst searchParamOrder: (keyof PokemonDetailsParams)[] = [\n  \"form\",\n  \"displayShiny\",\n  \"versionGroup\",\n  \"isDexEntriesPanelOpen\",\n  \"isLearnsetPanelOpen\",\n  \"isLocationsPanelOpen\",\n];\n\nexport const usePokemonDetailsParam = <K extends keyof PokemonDetailsParams>(\n  key: K,\n) => {\n  const navigate = useNavigate({ from: pokemonDetailsUrl });\n\n  // Get specific param's value from URL\n  const value = useSearch({\n    from: pokemonDetailsUrl,\n    select: (search) => search[key] ?? undefined,\n  });\n\n  const setValue = (value: PokemonDetailsParams[K]) =>\n    void navigate({\n      to: \".\",\n      search: (prev) => ({\n        ...prev,\n        // Reset versionGroup if it exists and the form param has changed\n        versionGroup: key === \"form\" ? undefined : prev.versionGroup,\n        [key]: value,\n      }),\n      replace: true,\n      resetScroll: false,\n      // Hide view transition while toggling app panels\n      viewTransition:\n        key !== \"isDexEntriesPanelOpen\" &&\n        key !== \"isLearnsetPanelOpen\" &&\n        key !== \"isLocationsPanelOpen\",\n      // Need to imperatively set the mask as to keep search params in sync\n      mask: {\n        to: \".\",\n        search: (prev) =>\n          orderSearchParams(\n            {\n              ...prev,\n              // Reset versionGroup if it exists and the form param has changed\n              versionGroup: key === \"form\" ? undefined : prev.versionGroup,\n              [key]: value,\n              isDexEntriesPanelOpen: undefined,\n              isLearnsetPanelOpen: undefined,\n              isLocationsPanelOpen: undefined,\n            },\n            searchParamOrder,\n          ),\n      },\n    });\n\n  return [value, setValue] as const;\n};\n","export const playAudio = (src: string) => {\n  const volume = Number(localStorage.getItem(\"volume\") ?? 5);\n  const isMuted = localStorage.getItem(\"isMuted\") === \"true\";\n\n  const audio = new Audio(src);\n  audio.volume = isMuted ? 0 : 0.02 * volume;\n\n  const play = async () => {\n    try {\n      await audio.play();\n    } catch {\n      // Fail silently if playback is blocked\n    }\n  };\n\n  const stop = () => {\n    audio.pause();\n    audio.currentTime = 0;\n  };\n\n  return { play, stop };\n};\n","import * as React from \"react\";\nfunction SparklesIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M9 4.5a.75.75 0 0 1 .721.544l.813 2.846a3.75 3.75 0 0 0 2.576 2.576l2.846.813a.75.75 0 0 1 0 1.442l-2.846.813a3.75 3.75 0 0 0-2.576 2.576l-.813 2.846a.75.75 0 0 1-1.442 0l-.813-2.846a3.75 3.75 0 0 0-2.576-2.576l-2.846-.813a.75.75 0 0 1 0-1.442l2.846-.813A3.75 3.75 0 0 0 7.466 7.89l.813-2.846A.75.75 0 0 1 9 4.5ZM18 1.5a.75.75 0 0 1 .728.568l.258 1.036c.236.94.97 1.674 1.91 1.91l1.036.258a.75.75 0 0 1 0 1.456l-1.036.258c-.94.236-1.674.97-1.91 1.91l-.258 1.036a.75.75 0 0 1-1.456 0l-.258-1.036a2.625 2.625 0 0 0-1.91-1.91l-1.036-.258a.75.75 0 0 1 0-1.456l1.036-.258a2.625 2.625 0 0 0 1.91-1.91l.258-1.036A.75.75 0 0 1 18 1.5ZM16.5 15a.75.75 0 0 1 .712.513l.394 1.183c.15.447.5.799.948.948l1.183.395a.75.75 0 0 1 0 1.422l-1.183.395c-.447.15-.799.5-.948.948l-.395 1.183a.75.75 0 0 1-1.422 0l-.395-1.183a1.5 1.5 0 0 0-.948-.948l-1.183-.395a.75.75 0 0 1 0-1.422l1.183-.395c.447-.15.799-.5.948-.948l.395-1.183A.75.75 0 0 1 16.5 15Z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(SparklesIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction StarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(StarIcon);\nexport default ForwardRef;","import { getRouteApi } from \"@tanstack/react-router\";\nimport { StarIcon as StarIconSolid } from \"@heroicons/react/24/solid\";\nimport { StarIcon as StarIconOutline } from \"@heroicons/react/24/outline\";\n\nimport { useStarredPokemon } from \"@/features/pokemon/hooks/useStarredPokemon.ts\";\n\nimport Button from \"@/components/button/Button.tsx\";\n\nconst route = getRouteApi(\"/pokemon/$pokemonId\");\n\nconst StarButton = () => {\n  const { pokemonId } = route.useParams();\n  const { starredPokemonIds, toggleStarredPokemonIds } = useStarredPokemon();\n  const isStarred = starredPokemonIds.includes(Number(pokemonId));\n\n  return (\n    <Button\n      onClick={() => toggleStarredPokemonIds(Number(pokemonId))}\n      variant=\"gold\"\n      className=\"pointer-events-auto ml-auto flex items-center gap-2 px-4\"\n    >\n      {isStarred ? (\n        <StarIconSolid className=\"size-4\" />\n      ) : (\n        <StarIconOutline className=\"size-4\" />\n      )}\n      {`Star${isStarred ? \"red\" : \"\"}`}\n    </Button>\n  );\n};\nexport default StarButton;\n","import BackButton from \"@/components/button/BackButton.tsx\";\nimport StarButton from \"@/features/pokemon/components/pokemonDetails/StarButton.tsx\";\n\nconst TopButtons = () => (\n  <div className=\"pointer-events-none sticky top-4 z-20 flex w-full px-2 sm:fixed sm:top-20 sm:px-4\">\n    <BackButton />\n    <StarButton />\n  </div>\n);\nexport default TopButtons;\n","import { useState } from \"react\";\n\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface ImageProps {\n  src: string | null | undefined;\n  alt: string | undefined;\n}\n\nconst PokemonImage = ({ src, alt }: ImageProps) => {\n  const [isLoadingImage, setIsLoadingImage] = useState(true);\n\n  return (\n    <div className=\"relative aspect-square max-h-128 w-full\">\n      <img\n        src={src ?? undefined}\n        alt={alt ?? \"\"}\n        decoding=\"async\"\n        fetchPriority=\"high\"\n        onLoad={() => setIsLoadingImage(false)}\n        className=\"mx-auto object-contain text-transparent\"\n      />\n\n      {/* Display a message if the selected Form doesn't have an image (the src is null) */}\n      {src === null && (\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center gap-4\">\n          <h2 className=\"text-center text-2xl font-bold sm:text-3xl\">\n            This Pokémon form doesn&apos;t have an image\n          </h2>\n\n          <p className=\"text-center font-semibold text-base-500 transition-[color] sm:text-lg dark:text-base-400\">\n            Please try another form by using one of the buttons above.\n          </p>\n        </div>\n      )}\n\n      {/* Covers the image with a loader if the image hasn't loaded */}\n      {(isLoadingImage || src === undefined) && src !== null && (\n        <div className=\"absolute inset-0 bg-base-50 transition-[background-color] dark:bg-base-950\">\n          <Loader size={24} displaysText={true} />\n        </div>\n      )}\n    </div>\n  );\n};\nexport default PokemonImage;\n","const PokemonName = ({ name }: { name: string | undefined }) => (\n  <h1 className=\"text-2xl font-bold capitalize\">\n    {name?.split(\"-\").join(\" \") ?? \"Loading...\"}\n  </h1>\n);\nexport default PokemonName;\n","import { SparklesIcon as SparklesIconSolid } from \"@heroicons/react/24/solid\";\nimport { SparklesIcon as SparklesIconOutline } from \"@heroicons/react/24/outline\";\n\nimport Button from \"@/components/button/Button.tsx\";\n\ninterface ButtonProps {\n  displayShiny: boolean;\n  setDisplayShiny: () => void;\n}\n\nconst ToggleShinyButton = ({ displayShiny, setDisplayShiny }: ButtonProps) => (\n  <Button\n    onClick={setDisplayShiny}\n    variant={displayShiny ? \"gold\" : \"normal\"}\n    className=\"flex items-center gap-2 px-4 text-nowrap\"\n  >\n    {displayShiny ? (\n      <SparklesIconSolid className=\"size-4\" />\n    ) : (\n      <SparklesIconOutline className=\"size-4\" />\n    )}\n    Shiny Art\n  </Button>\n);\nexport default ToggleShinyButton;\n","import type { Genus } from \"pokedex-promise-v2\";\n\nconst PokemonCategory = ({ category }: { category: Genus | undefined }) => (\n  <h2 className=\"mx-2 text-lg font-semibold text-base-600 transition-[color] dark:text-base-400\">\n    {category?.genus ?? \"Loading...\"}\n  </h2>\n);\nexport default PokemonCategory;\n","import type { Variety } from \"pokedex-promise-v2\";\n\nimport Button from \"@/components/button/Button.tsx\";\n\ninterface FormButtonProps {\n  pokemonSpecies: Variety[] | undefined;\n  placeholderName: string | undefined;\n  currentForm: number;\n  handleClick: (index: number) => void;\n}\n\nconst PokemonFormButtons = ({\n  pokemonSpecies,\n  placeholderName,\n  currentForm,\n  handleClick,\n}: FormButtonProps) => (\n  <>\n    <h2 className=\"ml-2 text-lg font-semibold sm:ml-4\">Current Form:</h2>\n\n    {pokemonSpecies ? (\n      <div className=\"-mx-2 flex flex-nowrap gap-2 overflow-x-scroll p-2 pt-1 sm:-mx-4 sm:px-4 md:-mx-2 md:mask-x-from-99% md:mask-x-to-100% md:px-2\">\n        {pokemonSpecies.map((form, index) => (\n          <Button\n            key={form.pokemon.name}\n            onClick={() => handleClick(index)}\n            disabled={currentForm === index}\n            variant={currentForm === index ? \"indigo\" : \"normal\"}\n            className=\"px-4 text-nowrap capitalize disabled:cursor-default\"\n          >\n            {form.pokemon.name.split(\"-\").join(\" \")}\n          </Button>\n        ))}\n      </div>\n    ) : placeholderName ? (\n      <div className=\"mt-1 mb-2 flex items-center gap-2\">\n        <Button\n          disabled={true}\n          variant=\"indigo\"\n          className=\"cursor-default px-4 text-nowrap capitalize\"\n        >\n          {placeholderName.split(\"-\").join(\" \")}\n        </Button>\n\n        <div className=\"h-10 w-full animate-pulse rounded-xl bg-base-500/50\" />\n      </div>\n    ) : (\n      <div className=\"mt-1 mb-2 h-10 w-full animate-pulse rounded-xl bg-base-500/50\" />\n    )}\n  </>\n);\nexport default PokemonFormButtons;\n","import type { PokemonAbility } from \"pokedex-promise-v2\";\n\nimport { usePokemonAbility } from \"@/hooks/usePokeApi.ts\";\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nconst PokemonAbilityDisplay = ({ ability }: { ability: PokemonAbility }) => {\n  const { data: abilityData } = usePokemonAbility(\n    getIdFromUrl(ability.ability.url)!,\n  );\n\n  return (\n    <div>\n      <h3 className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n        {`${capitalize(ability.ability.name)}${ability.is_hidden ? \" (Hidden)\" : \"\"}`}\n      </h3>\n\n      <p>\n        {abilityData\n          ? (abilityData?.flavor_text_entries\n              .slice()\n              .reverse()\n              .find((entry) => entry.language.name === \"en\")?.flavor_text ??\n            \"No description available\")\n          : \"Loading...\"}\n      </p>\n    </div>\n  );\n};\nexport default PokemonAbilityDisplay;\n","import type { PokemonAbility } from \"pokedex-promise-v2\";\n\nimport PokemonAbilityDisplay from \"@/features/pokemon/components/pokemonDetails/PokemonAbilityDisplay.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface AbilitiesProps {\n  abilities: PokemonAbility[] | undefined;\n}\n\nconst PokemonAbilities = ({ abilities }: AbilitiesProps) => (\n  <>\n    <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">\n      {abilities?.length === 1 ? \"Ability:\" : \"Abilities:\"}\n    </h2>\n\n    <div className=\"mb-2 max-w-lg space-y-4 rounded-xl bg-base-100 p-2 pb-3 shadow-md transition-[background-color] sm:px-4 dark:bg-base-900 dark:shadow-none\">\n      {abilities\n        // Deduplicates abilities based on their names\n        ?.filter(\n          ({ ability: { name } }, i) =>\n            abilities.map(({ ability: { name } }) => name).indexOf(name) === i,\n        )\n        .map((ability) => (\n          <PokemonAbilityDisplay key={ability.ability.name} ability={ability} />\n        )) ?? (\n        <div className=\"h-24\">\n          <Loader size={16} />\n        </div>\n      )}\n    </div>\n  </>\n);\nexport default PokemonAbilities;\n","export const stats: { label: string; color: string }[] = [\n  { label: \"HP\", color: \"#9ee865\" },\n  { label: \"Attack\", color: \"#f5de69\" },\n  { label: \"Defense\", color: \"#f09a65\" },\n  { label: \"Sp. Atk\", color: \"#66d8f6\" },\n  { label: \"Sp. Def\", color: \"#899eea\" },\n  { label: \"Speed\", color: \"#e46cca\" },\n];\n","import { Fragment } from \"react\";\nimport type { StatElement } from \"pokedex-promise-v2\";\n\nimport { stats } from \"@/data/stats.ts\";\n\ninterface StatsProps {\n  pokemonStats: StatElement[] | undefined;\n}\n\nconst PokemonStats = ({ pokemonStats }: StatsProps) => (\n  <>\n    <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">Base Stats:</h2>\n\n    <div className=\"mb-4 max-w-lg rounded-xl bg-base-100 p-2 pt-3 shadow-md transition-[background-color] sm:px-4 dark:bg-base-900 dark:shadow-none\">\n      <div className=\"grid grid-cols-[auto_auto_1fr] gap-2\">\n        {stats.map(({ label, color }, index) => (\n          <Fragment key={label}>\n            {/* Stat name */}\n            <h3 className=\"font-semibold capitalize\">{label}:</h3>\n\n            {/* Stat number */}\n            {pokemonStats ? (\n              <p className=\"w-8 text-end\">\n                {pokemonStats[index].base_stat ?? 0}\n              </p>\n            ) : (\n              <div className=\"my-auto -mr-2 h-5 w-8 animate-pulse rounded-l-sm bg-base-500/50\" />\n            )}\n\n            {/* Stat bar */}\n            {pokemonStats ? (\n              <div className=\"relative my-auto h-5\">\n                <div\n                  style={{ backgroundColor: color }}\n                  className=\"absolute h-full w-full rounded-sm opacity-50 brightness-125 transition-[filter] dark:brightness-75\"\n                />\n\n                <div\n                  style={{\n                    width: `${((pokemonStats[index].base_stat ?? 0) / 255) * 100}%`,\n                    backgroundColor: color,\n                  }}\n                  className=\"absolute h-full rounded-sm opacity-75 brightness-90 saturate-125 transition-[filter] dark:brightness-110\"\n                />\n              </div>\n            ) : (\n              <div className=\"my-auto h-5 w-full animate-pulse rounded-r-sm bg-base-500/50\" />\n            )}\n          </Fragment>\n        ))}\n      </div>\n\n      {pokemonStats ? (\n        <h3 className=\"pt-2 font-semibold\">\n          {`Base Stat Total: ${pokemonStats.reduce(\n            (total, { base_stat }) => total + base_stat,\n            0,\n          )}`}\n        </h3>\n      ) : (\n        <div className=\"mt-2 mb-1 h-5 w-36 animate-pulse rounded-sm bg-base-500/50\" />\n      )}\n    </div>\n  </>\n);\nexport default PokemonStats;\n","import type { EvolutionDetail } from \"pokedex-promise-v2\";\n\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nconst formatEvolutionMethod = (details: EvolutionDetail[]) => {\n  if (!details.length) return \"\";\n\n  // prettier-ignore\n  return details.map((detail) => {\n    const conditions: string[] = [];\n\n    // Evolution trigger lookup\n    const triggerConditions: Record<string, string> = {\n      \"level-up\": \"when leveled up\",\n      \"strong-style-move\": \"when leveled up\", // Overqwil\n      trade: \"when traded\",\n      shed: \"at level 20, alongside Ninjask\", // Shedinja\n      spin: \"while holding a Sweet when the player spins and strikes a pose or gets dizzy\", // Alcremie\n      \"tower-of-darkness\": \"when shown the Scroll of Darkness\", // Urshifu Single Strike Style\n      \"tower-of-waters\": \"when shown the Scroll of Waters\", // Urshifu Rapid Strike Style\n      \"three-critical-hits\": \"after landing three critical hits in a single battle\", // Sirfetch'd\n      \"take-damage\": \"after taking 49 HP damage and traveling under the rock arch in Dusty Bowl\", // Runerigus\n      \"recoil-damage\": \"after losing at least 294 HP from recoil damage without fainting\", // Basculegion\n    };\n\n    // Apply trigger condition if it exists\n    if (detail.trigger.name in triggerConditions) conditions.push(triggerConditions[detail.trigger.name]);\n\n    // Level-based evolutions\n    if (detail.min_level) conditions.push(`at level ${detail.min_level}`);\n\n    // Item-based evolutions\n    if (detail.item) conditions.push(`when exposed to a ${capitalize(detail.item.name)}`);\n    if (detail.held_item) conditions.push(`while holding a ${capitalize(detail.held_item.name)}`);\n\n    // Gender-based evolutions\n    if (detail.gender === 1) conditions.push(\"while being female\");\n    else if (detail.gender === 2) conditions.push(\"while being male\");\n\n    // Stat-based evolutions\n    if (detail.min_happiness) conditions.push(`with high happiness`);\n    if (detail.min_affection) conditions.push(`with high affection`);\n    if (detail.min_beauty) conditions.push(`with its Beautiful condition high enough`);\n\n    // Move-based evolutions\n    if (detail.known_move) conditions.push(`while knowing ${capitalize(detail.known_move.name)}`);\n    if (detail.known_move_type) conditions.push(`while knowing a ${capitalize(detail.known_move_type.name)}-type move`);\n\n    // Party-based evolutions\n    if (detail.party_species) conditions.push(`with a ${capitalize(detail.party_species.name)} in the party`);\n    if (detail.party_type) conditions.push(`with a ${capitalize(detail.party_type.name)}-type Pokémon in the party`);\n\n    if (detail.trade_species) conditions.push(`for a ${capitalize(detail.trade_species.name)}`);\n    if (detail.location) conditions.push(`in ${capitalize(detail.location.name)}`);\n    if (detail.time_of_day) conditions.push(`during ${detail.time_of_day}`);\n    if (detail.needs_overworld_rain) conditions.push(`when raining`);\n\n    // Special case (Malamar)\n    if (detail.turn_upside_down) conditions.push(`while holding the console upside down`);\n\n    return conditions.join(\" \");\n  })\n  .join(\" or \");\n};\nexport default formatEvolutionMethod;\n","import type { Chain, EvolutionDetail } from \"pokedex-promise-v2\";\n\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport formatEvolutionMethod from \"@/features/pokemon/utils/formatEvolutionMethod.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\ninterface Evolution extends ItemResource {\n  evolutionMethod: string;\n}\n\n// Extract the Pokémon name and the ID from the URL\nconst extractData = (node: Chain, evolutionDetails: EvolutionDetail[]) => ({\n  name: node.species.name,\n  id: Number(getIdFromUrl(node.species.url)),\n  // A string detailing how another Pokémon evolves/evolved into this Pokémon\n  evolutionMethod: formatEvolutionMethod(evolutionDetails),\n});\n\nconst getEvolutionData = (chain: Chain, pokemonName: string) => {\n  let previous: Evolution | null = null; // Previous Pokémon in the evolution chain\n  let next: Evolution[] = []; // Next Pokémon(s) in the evolution chain\n\n  // Recursively traverses the evolution chain to find relevant data\n  const traverse = (node: Chain, parent: Evolution | null = null) => {\n    // If the current Pokémon is found in the evolution line\n    if (node.species.name === pokemonName) {\n      previous = parent; // Store its previous evolution\n      // Store its next evolutions\n      next = node.evolves_to.map((pokemon) =>\n        extractData(pokemon, pokemon.evolution_details),\n      );\n      return;\n    }\n    // Continue searching in the evolution tree for each possible next evolution\n    node.evolves_to.forEach((child) =>\n      traverse(child, extractData(node, child.evolution_details)),\n    );\n  };\n\n  // Start the recursive traversal from the root of the evolution chain\n  traverse(chain);\n\n  return { previous, next } as {\n    previous: Evolution | null;\n    next: Evolution[];\n  };\n};\nexport default getEvolutionData;\n","import { Fragment } from \"react\";\nimport { Link } from \"@tanstack/react-router\";\n\nimport { useEvolutionChain } from \"@/hooks/usePokeApi.ts\";\nimport getEvolutionData from \"@/features/pokemon/utils/getEvolutionData.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\ninterface ChainProps {\n  id: number | undefined;\n  pokemonName: string | undefined;\n}\n\ninterface Evolution extends ItemResource {\n  evolutionMethod: string;\n}\n\n// Link to the respective Pokémon page and the evolution description\nconst pokemonEvolutionText = (pokemon: Evolution) => (\n  <>\n    <Link\n      to=\"/pokemon/$pokemonId\"\n      params={{ pokemonId: String(pokemon.id) }}\n      draggable=\"false\"\n      className=\"capitalize underline underline-offset-4 transition-[color] hover:text-blue-600 focus:text-blue-600 dark:hover:text-blue-400 dark:focus:text-blue-400\"\n    >\n      {pokemon.name}\n    </Link>\n    {` ${pokemon.evolutionMethod || \"(no data available)\"}`}\n  </>\n);\n\n// Format the list of evolutions\nconst formatNextEvolutions = (pokemonList: Evolution[]) => {\n  // If this Pokémon has one evolution branch after it\n  if (pokemonList.length === 1) return pokemonEvolutionText(pokemonList[0]);\n\n  // If this Pokémon has two evolution branches after it\n  if (pokemonList.length === 2)\n    return (\n      <>\n        {pokemonEvolutionText(pokemonList[0])}\n        {\", or \"}\n        {pokemonEvolutionText(pokemonList[1])}\n      </>\n    );\n\n  // If this Pokémon has three or more evolution branches after it\n  return (\n    <>\n      {pokemonList.slice(0, pokemonList.length - 1).map((pokemon) => (\n        <Fragment key={pokemon.name}>\n          {pokemonEvolutionText(pokemon)}\n          {\", \"}\n        </Fragment>\n      ))}\n      {\" or \"}\n      {pokemonEvolutionText(pokemonList[pokemonList.length - 1])}\n    </>\n  );\n};\n\nconst PokemonEvolutionChain = ({ id, pokemonName }: ChainProps) => {\n  const { data: chain } = useEvolutionChain(id);\n\n  // If the data hasn't arrived yet\n  if (!chain || !pokemonName) return <p>Loading...</p>;\n\n  // Calling the function to get the evolution data\n  const { previous, next } = getEvolutionData(chain.chain, pokemonName);\n\n  // If this Pokémon doesn't evolve at all\n  if (!previous && !next.length)\n    return <p className=\"mx-2\">This Pokémon does not evolve.</p>;\n\n  // If this Pokémon is a base form\n  if (!previous)\n    return (\n      <p className=\"mx-2\">\n        This Pokémon evolves into {formatNextEvolutions(next)}.\n      </p>\n    );\n\n  // If this Pokémon is fully evolved\n  if (!next.length)\n    return (\n      <p className=\"mx-2\">\n        This Pokémon evolves from {pokemonEvolutionText(previous)}.\n      </p>\n    );\n\n  // If this Pokémon is a middle evolution\n  return (\n    <p className=\"mx-2\">\n      This Pokémon evolves from {pokemonEvolutionText(previous)}, and evolves\n      into {formatNextEvolutions(next)}.\n    </p>\n  );\n};\nexport default PokemonEvolutionChain;\n","interface CatchRateProps {\n  catchRate: number | undefined;\n}\n\nconst PokemonCatchRate = ({ catchRate }: CatchRateProps) => {\n  // Simplified (but still accurate) formula for catching the Pokémon\n  // at full HP with a normal Pokéball based on its catch rate\n  const probability = (Math.pow((catchRate ?? 0) / 765, 0.75) * 100).toFixed(2);\n\n  return (\n    <p className=\"m-2\">\n      {catchRate ? (\n        <>\n          <span className=\"font-bold text-base-700 transition-[color] dark:text-base-300\">\n            Catch Rate:\n          </span>\n\n          {` ${catchRate} (`}\n          <span className=\"group relative border-b-3 border-dotted\">\n            {`${probability}%`}\n\n            <span className=\"pointer-events-none absolute bottom-full left-1/2 mb-1 w-48 -translate-x-1/2 rounded bg-base-800 px-3 py-1 text-center text-sm text-base-200 opacity-0 shadow-md transition-opacity group-[&:hover]:opacity-100 dark:bg-base-200 dark:text-base-800 dark:shadow-none\">\n              {`${probability}% chance to catch at full HP with an ordinary Poké Ball in Generation VI+`}\n            </span>\n          </span>\n          {\")\"}\n        </>\n      ) : (\n        \"Loading...\"\n      )}\n    </p>\n  );\n};\nexport default PokemonCatchRate;\n","export const typeEffectiveness: Record<string, Record<string, number>> = {\n  normal: {\n    fighting: 2,\n    ghost: 0,\n  },\n  fighting: {\n    flying: 2,\n    rock: 0.5,\n    bug: 0.5,\n    psychic: 2,\n    dark: 0.5,\n    fairy: 2,\n  },\n  flying: {\n    fighting: 0.5,\n    ground: 0,\n    rock: 2,\n    bug: 0.5,\n    grass: 0.5,\n    electric: 2,\n    ice: 2,\n  },\n  poison: {\n    fighting: 0.5,\n    poison: 0.5,\n    ground: 2,\n    bug: 0.5,\n    grass: 0.5,\n    psychic: 2,\n    fairy: 0.5,\n  },\n  ground: {\n    poison: 0.5,\n    rock: 0.5,\n    water: 2,\n    grass: 2,\n    electric: 0,\n    ice: 2,\n  },\n  rock: {\n    normal: 0.5,\n    fighting: 2,\n    flying: 0.5,\n    poison: 0.5,\n    ground: 2,\n    steel: 2,\n    fire: 0.5,\n    water: 2,\n    grass: 2,\n  },\n  bug: {\n    fighting: 0.5,\n    flying: 2,\n    ground: 0.5,\n    rock: 2,\n    fire: 2,\n    grass: 0.5,\n  },\n  ghost: {\n    normal: 0,\n    fighting: 0,\n    poison: 0.5,\n    bug: 0.5,\n    ghost: 2,\n    dark: 2,\n  },\n  steel: {\n    normal: 0.5,\n    fighting: 2,\n    flying: 0.5,\n    poison: 0,\n    ground: 2,\n    rock: 0.5,\n    bug: 0.5,\n    steel: 0.5,\n    fire: 2,\n    grass: 0.5,\n    psychic: 0.5,\n    ice: 0.5,\n    dragon: 0.5,\n    fairy: 0.5,\n  },\n  fire: {\n    ground: 2,\n    rock: 2,\n    bug: 0.5,\n    steel: 0.5,\n    fire: 0.5,\n    water: 2,\n    grass: 0.5,\n    ice: 0.5,\n    fairy: 0.5,\n  },\n  water: {\n    steel: 0.5,\n    fire: 0.5,\n    water: 0.5,\n    grass: 2,\n    electric: 2,\n    ice: 0.5,\n  },\n  grass: {\n    flying: 2,\n    poison: 2,\n    ground: 0.5,\n    bug: 2,\n    fire: 2,\n    water: 0.5,\n    grass: 0.5,\n    electric: 0.5,\n    ice: 2,\n  },\n  electric: {\n    flying: 0.5,\n    ground: 2,\n    steel: 0.5,\n    electric: 0.5,\n  },\n  psychic: {\n    fighting: 0.5,\n    bug: 2,\n    ghost: 2,\n    psychic: 0.5,\n    dark: 2,\n  },\n  ice: {\n    fighting: 2,\n    rock: 2,\n    steel: 2,\n    fire: 2,\n    ice: 0.5,\n  },\n  dragon: {\n    fire: 0.5,\n    water: 0.5,\n    grass: 0.5,\n    electric: 0.5,\n    ice: 2,\n    dragon: 2,\n    fairy: 2,\n  },\n  dark: {\n    fighting: 2,\n    bug: 2,\n    ghost: 0.5,\n    psychic: 0,\n    dark: 0.5,\n    fairy: 2,\n  },\n  fairy: {\n    fighting: 0.5,\n    poison: 2,\n    bug: 0.5,\n    steel: 2,\n    dragon: 0,\n    dark: 0.5,\n  },\n};\n","import { typeEffectiveness } from \"@/data/typeEffectiveness.ts\";\n\nconst getTypeEffectivenessData = (types: string[]) => {\n  // An object which will contain all 18 types and the multiplier to which they deal damage to the Pokémon\n  const multipliers: Record<string, number> = {};\n\n  // An object to categorize the types depending on their damage multiplier against the Pokémon\n  const categories: Record<string, { types: string[]; label: string }> = {\n    normal: { types: [], label: \"Damaged normally by\" },\n    weak: { types: [], label: \"Weak to\" },\n    resistant: { types: [], label: \"Resistant to\" },\n    immune: { types: [], label: \"Immune to\" },\n  };\n\n  // Determine the effectiveness and category of each type\n  for (const attackingType of Object.keys(typeEffectiveness)) {\n    // Base multiplier of 1\n    let multiplier = 1;\n\n    // Multiply effectiveness across all the Pokémon's defending types\n    for (const defendingType of types)\n      multiplier *= typeEffectiveness[defendingType]?.[attackingType] ?? 1;\n\n    multipliers[attackingType] = multiplier;\n\n    // Categorize the type based on its effectiveness\n    if (multiplier === 0) categories.immune.types.push(attackingType);\n    else if (multiplier < 1) categories.resistant.types.push(attackingType);\n    else if (multiplier > 1) categories.weak.types.push(attackingType);\n    else categories.normal.types.push(attackingType);\n  }\n\n  return { categories, multipliers };\n};\nexport default getTypeEffectivenessData;\n","import getTypeEffectivenessData from \"@/features/pokemon/utils/getTypeEffectivenessData.ts\";\n\nimport Loader from \"@/components/Loader.tsx\";\nimport TypeDisplay from \"@/components/TypeDisplay.tsx\";\n\ninterface TypesProps {\n  types: string[] | undefined;\n}\n\ninterface CategoryProps {\n  title: string;\n  types: string[];\n  multipliers: Record<string, number>;\n}\n\nconst EffectivenessCategory = ({\n  title,\n  types,\n  multipliers,\n}: CategoryProps) => (\n  <>\n    <p>{title}:</p>\n\n    {/* List of types from the specific category */}\n    <div className=\"flex flex-wrap gap-1 pt-1 pb-2\">\n      {types.map((type) => (\n        <div key={type} className=\"flex w-34 items-center gap-1 pr-2\">\n          <TypeDisplay type={type} />\n\n          {multipliers[type] === 0.25 ? (\n            // Reduce X scale when the multiplier is 0.25 since it would otherwise take too much horizontal space\n            <span className=\"-ml-0.5 scale-x-90\">{`${multipliers[type]}x`}</span>\n          ) : (\n            <span>{`${multipliers[type]}x`}</span>\n          )}\n        </div>\n      ))}\n    </div>\n  </>\n);\n\nconst PokemonTypeEffectiveness = ({ types }: TypesProps) => {\n  if (!types)\n    return (\n      <>\n        <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">\n          Type effectiveness:\n        </h2>\n\n        <div className=\"h-80 w-full rounded-lg bg-base-100 shadow-lg transition-[background-color] dark:bg-base-900 dark:shadow-none\">\n          <Loader size={24} displaysText={true} />\n        </div>\n      </>\n    );\n\n  const { categories, multipliers } = getTypeEffectivenessData(types);\n\n  return (\n    <>\n      <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">\n        Type effectiveness:\n      </h2>\n\n      <div className=\"mb-2 w-full rounded-xl bg-base-100 p-2 shadow-md transition-[background-color] sm:px-4 dark:bg-base-900 dark:shadow-none\">\n        <p>This Pokémon is:</p>\n\n        {Object.values(categories)\n          .filter(({ types }) => types.length)\n          .map(({ types, label }) => (\n            <EffectivenessCategory\n              key={label}\n              title={label}\n              types={types}\n              multipliers={multipliers}\n            />\n          ))}\n      </div>\n    </>\n  );\n};\nexport default PokemonTypeEffectiveness;\n","export const games: Record<string, { label: string }> = {\n  red: { label: \"Red\" },\n  blue: { label: \"Blue\" },\n  yellow: { label: \"Yellow\" },\n  gold: { label: \"Gold\" },\n  silver: { label: \"Silver\" },\n  crystal: { label: \"Crystal\" },\n  ruby: { label: \"Ruby\" },\n  sapphire: { label: \"Sapphire\" },\n  emerald: { label: \"Emerald\" },\n  firered: { label: \"FireRed\" },\n  leafgreen: { label: \"LeafGreen\" },\n  diamond: { label: \"Diamond\" },\n  pearl: { label: \"Pearl\" },\n  platinum: { label: \"Platinum\" },\n  heartgold: { label: \"HeartGold\" },\n  soulsilver: { label: \"SoulSilver\" },\n  black: { label: \"Black\" },\n  white: { label: \"White\" },\n  \"black-2\": { label: \"Black 2\" },\n  \"white-2\": { label: \"White 2\" },\n  x: { label: \"X\" },\n  y: { label: \"Y\" },\n  \"omega-ruby\": { label: \"Omega Ruby\" },\n  \"alpha-sapphire\": { label: \"Alpha Sapphire\" },\n  sun: { label: \"Sun\" },\n  moon: { label: \"Moon\" },\n  \"ultra-sun\": { label: \"Ultra Sun\" },\n  \"ultra-moon\": { label: \"Ultra Moon\" },\n  \"lets-go-pikachu\": { label: \"Let's Go, Pikachu!\" },\n  \"lets-go-eevee\": { label: \"Let's Go, Eevee!\" },\n  sword: { label: \"Sword\" },\n  shield: { label: \"Shield\" },\n  \"brilliant-diamond\": { label: \"Brilliant Diamond\" },\n  \"shining-pearl\": { label: \"Shining Pearl\" },\n  \"legends-arceus\": { label: \"Legends: Arceus\" },\n  scarlet: { label: \"Scarlet\" },\n  violet: { label: \"Violet\" },\n};\n","import type { NamedAPIResource } from \"pokedex-promise-v2\";\n\nimport { usePokemonDetailsParam } from \"@/features/pokemon/hooks/usePokemonDetailsParam.ts\";\nimport { games } from \"@/data/games.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nimport Accordion from \"@/components/Accordion.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface Entry {\n  flavor_text: string;\n  language: NamedAPIResource;\n  version?: NamedAPIResource;\n}\n\ninterface EntriesProps {\n  // Currently pokedex-promise-v2 has a typing bug, so a manual type is used instead\n  // (Usually the correct type is FlavorText[])\n  textEntries: Entry[] | undefined;\n}\n\nconst flavorTextEntry = (entry: Entry) => (\n  <>\n    <span className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n      {/* Display a hardcoded string for the version, with original one as a fallback */}\n      {games[entry.version?.name ?? \"\"]?.label ??\n        capitalize(entry.version?.name ?? \"\")}\n      {\": \"}\n    </span>\n    {entry.flavor_text}\n  </>\n);\n\nconst FlavorTextEntries = ({ textEntries }: EntriesProps) => {\n  const [isOpen, setIsOpen] = usePokemonDetailsParam(\"isDexEntriesPanelOpen\");\n\n  const sortedEntries = textEntries\n    // Filter to display only the english Dex Entries\n    ?.filter((entry) => entry.language.name === \"en\")\n    // Reverse order to show Dex Entries from newest games first\n    .reverse();\n\n  return (\n    <>\n      <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">Dex Entries:</h2>\n\n      <div className=\"rounded-xl bg-base-100 transition-[background] dark:bg-base-900\">\n        {sortedEntries?.length ? (\n          <>\n            <p\n              className={`${\n                sortedEntries.length > 1 ? \"-mb-2\" : \"pb-2\"\n              } px-2 pt-2 sm:px-4`}\n            >\n              {flavorTextEntry(sortedEntries[0])}\n            </p>\n\n            {sortedEntries.length > 1 && (\n              <Accordion\n                label=\"More Dex Entries\"\n                initialIsOpen={isOpen}\n                toggleOpen={() => setIsOpen(isOpen ? undefined : true)}\n              >\n                <ul>\n                  {sortedEntries.slice(1).map((entry) => (\n                    <li\n                      key={entry.version?.name}\n                      className=\"p-2 even:bg-base-500/15 sm:px-4\"\n                    >\n                      {flavorTextEntry(entry)}\n                    </li>\n                  ))}\n                </ul>\n              </Accordion>\n            )}\n          </>\n        ) : (\n          <div className=\"h-27\">\n            <Loader size={16} />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\nexport default FlavorTextEntries;\n","import type { MoveElement } from \"pokedex-promise-v2\";\n\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\ninterface Moves {\n  label: string;\n  moves: (ItemResource & { level: number })[];\n}\n\ntype Learnset = Record<string, Moves>;\n\nconst filterLearnsetData = (\n  moves: MoveElement[],\n  currentVersionGroup: string,\n) => {\n  const learnset: Learnset = {\n    levelUpMoves: { label: \"Level-Up Moves\", moves: [] },\n    machineMoves: { label: \"TM Moves\", moves: [] },\n    eggMoves: { label: \"Egg Moves\", moves: [] },\n    tutorMoves: { label: \"Tutor Moves\", moves: [] },\n  };\n\n  moves.forEach((move) => {\n    move.version_group_details.forEach((vg) => {\n      if (vg.version_group.name === currentVersionGroup) {\n        const moveData = {\n          id: Number(getIdFromUrl(move.move.url)),\n          name: move.move.name,\n          level: vg.level_learned_at,\n        };\n\n        // Add the move to its respective categories, if applicable\n        switch (vg.move_learn_method.name) {\n          case \"level-up\":\n            learnset.levelUpMoves.moves.push(moveData);\n            break;\n          case \"machine\":\n            learnset.machineMoves.moves.push(moveData);\n            break;\n          case \"egg\":\n            learnset.eggMoves.moves.push(moveData);\n            break;\n          case \"tutor\":\n            learnset.tutorMoves.moves.push(moveData);\n            break;\n        }\n      }\n    });\n  });\n\n  // Sort level-up moves by level\n  learnset.levelUpMoves.moves.sort((a, b) => a.level - b.level);\n\n  return learnset;\n};\nexport default filterLearnsetData;\n","import { Link } from \"@tanstack/react-router\";\nimport { ChevronRightIcon } from \"@heroicons/react/24/outline\";\n\nimport { useMove } from \"@/hooks/usePokeApi.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\nimport TypeDisplay from \"@/components/TypeDisplay.tsx\";\nimport MoveCategoryDisplay from \"@/components/MoveCategoryDisplay.tsx\";\n\ninterface RowProps {\n  move: ItemResource & { level: number };\n  displayLevel: boolean;\n}\n\nconst PokemonMoveTableRow = ({ move, displayLevel }: RowProps) => {\n  const { data: moveData } = useMove(move.id);\n\n  return (\n    <tr className=\"group relative h-8 transition-[background-color] even:bg-base-500/15 hover:bg-blue-500/20 has-focus:bg-blue-500/20 pointer-coarse:h-12\">\n      {/* Invisible Link (has to be the first for the peer class to work) */}\n      <td aria-hidden=\"true\" className=\"peer\">\n        <Link\n          to=\"/moves/$moveId\"\n          params={{ moveId: String(move.id) }}\n          draggable=\"false\"\n          className=\"absolute inset-0\"\n        />\n      </td>\n\n      {/* Level at which the move is learned, if it is in the Level-Up Moves table */}\n      {displayLevel && <td className=\"min-w-14\">{move.level || \"Evo.\"}</td>}\n\n      {/* Move name */}\n      <td className=\"min-w-36 font-semibold capitalize transition-[color] group-hover:text-blue-600 peer-focus-within:text-blue-600 dark:group-hover:text-blue-400 dark:peer-focus-within:text-blue-400\">\n        {move.name.split(\"-\").join(\" \")}\n      </td>\n\n      {/* Move type */}\n      <td className=\"pointer-events-none w-26 min-w-26\">\n        {moveData ? (\n          <TypeDisplay type={moveData.type.name} className=\"rounded-r-none\" />\n        ) : (\n          <div className=\"h-6 w-26 animate-pulse rounded-l-full bg-base-500/50\" />\n        )}\n      </td>\n\n      {/* Move category (physical, special, status) */}\n      <td className=\"pointer-events-none w-28 min-w-28\">\n        {moveData ? (\n          <MoveCategoryDisplay\n            category={moveData.damage_class.name}\n            className=\"rounded-l-none\"\n          />\n        ) : (\n          <div className=\"h-6 w-26 animate-pulse rounded-r-full bg-base-500/50\" />\n        )}\n      </td>\n\n      {/* Move power, if applicable */}\n      <td className=\"min-w-16\">{moveData?.power ?? \"-\"}</td>\n\n      {/* Move accuracy, if applicable */}\n      <td className=\"min-w-22\">\n        {moveData?.accuracy ? `${moveData?.accuracy}%` : \"-\"}\n      </td>\n\n      {/* Move PP (Power Points) */}\n      <td className=\"min-w-6\">{moveData?.pp ?? \"-\"}</td>\n\n      {/* Arrow indicating that the row is clickable */}\n      <td className=\"pointer-events-none scale-75 rounded-lg transition-[background-color_color] group-hover:bg-blue-500/25 group-hover:text-blue-600 peer-focus-within:bg-blue-500/25 peer-focus-within:text-blue-600 dark:group-hover:text-blue-400 dark:peer-focus-within:text-blue-400\">\n        <ChevronRightIcon className=\"size-8 pointer-coarse:size-12 pointer-coarse:scale-75\" />\n      </td>\n    </tr>\n  );\n};\nexport default PokemonMoveTableRow;\n","import type { ItemResource } from \"@/types/types.ts\";\n\nimport PokemonMoveTableRow from \"@/features/pokemon/components/pokemonDetails/learnset/PokemonMoveTableRow.tsx\";\n\ninterface MovesProps {\n  moves: (ItemResource & { level: number })[];\n  label: string;\n}\n\nconst PokemonMovesTable = ({ moves, label }: MovesProps) => (\n  <>\n    <h3 className=\"mt-2 mb-1 pl-3 text-2xl font-bold capitalize sm:pl-5\">\n      {label}\n    </h3>\n\n    <div className=\"overflow-x-scroll px-2 pb-3 sm:px-4\">\n      {/* Table displaying the learnset from the selected version group */}\n      <table className=\"w-full text-nowrap\">\n        <thead className=\"border-b border-base-500\">\n          <tr>\n            {/* Empty th because the first element is an invisible Link */}\n            <th className=\"w-2 min-w-2\" />\n            {label === \"Level-Up Moves\" && (\n              <th className=\"min-w-14 pb-1 text-start\">Level</th>\n            )}\n            <th className=\"min-w-36 pb-1 text-start\">Move</th>\n\n            <th className=\"w-26 min-w-26 pb-1 text-start\">Type</th>\n            <th className=\"w-28 min-w-28 pb-1 text-start\">Category</th>\n            <th className=\"min-w-16 pb-1 text-start\">Power</th>\n            <th className=\"min-w-22 pb-1 text-start\">Accuracy</th>\n            <th className=\"min-w-6 pb-1 text-start\">PP</th>\n            {/* Empty th for the arrow at the end */}\n            <th className=\"w-6\" />\n          </tr>\n        </thead>\n\n        <tbody>\n          {moves.map((move) => (\n            <PokemonMoveTableRow\n              key={`${move.level}-${move.name}`}\n              move={move}\n              displayLevel={label === \"Level-Up Moves\"}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  </>\n);\nexport default PokemonMovesTable;\n","import type { MoveElement } from \"pokedex-promise-v2\";\n\nimport { usePokemonDetailsParam } from \"@/features/pokemon/hooks/usePokemonDetailsParam.ts\";\nimport filterLearnsetData from \"@/features/pokemon/utils/filterLearnsetData.ts\";\nimport { versionGroups } from \"@/data/versionGroups.ts\";\n\nimport Loader from \"@/components/Loader.tsx\";\nimport Button from \"@/components/button/Button.tsx\";\nimport PokemonMovesTable from \"@/features/pokemon/components/pokemonDetails/learnset/PokemonMovesTable.tsx\";\n\nconst PokemonMoves = ({ moves }: { moves: MoveElement[] | undefined }) => {\n  const [versionGroup, setVersionGroup] =\n    usePokemonDetailsParam(\"versionGroup\");\n  // Indexing from 1 instead of 0 since this value can be seen by the user\n  const currentVersionIndex = (versionGroup ?? 1) - 1;\n\n  if (!moves)\n    return (\n      <div className=\"h-60\">\n        <Loader size={24} displaysText={true} />\n      </div>\n    );\n\n  if (!moves?.length)\n    return (\n      <p className=\"p-2 sm:p-4\">\n        There seems to be no learnset data for this Pokémon&apos;s form. Try\n        checking another form above.\n      </p>\n    );\n\n  // All version groups that this Pokémon is in\n  const availableVersionGroups = Object.entries(versionGroups).filter(\n    ([group]) =>\n      moves.some((move) =>\n        move.version_group_details.some(\n          (vg) => vg.version_group.name === group,\n        ),\n      ),\n  );\n\n  const [selectedVersionGroup] = availableVersionGroups[currentVersionIndex];\n  const learnset = filterLearnsetData(moves, selectedVersionGroup);\n\n  return (\n    <>\n      {availableVersionGroups.length > 1 && (\n        <div className=\"mb-2 flex flex-nowrap gap-2 overflow-x-scroll p-2 pt-4 sm:px-4\">\n          {/* Buttons to select the game from which to display the data */}\n          {availableVersionGroups.map(([group, { label }], index) => (\n            <Button\n              key={group}\n              onClick={() =>\n                setVersionGroup(index === 0 ? undefined : index + 1)\n              }\n              disabled={currentVersionIndex === index}\n              variant={currentVersionIndex === index ? \"indigo\" : \"normal\"}\n              className=\"px-4 text-nowrap capitalize disabled:cursor-default\"\n            >\n              {label}\n            </Button>\n          ))}\n        </div>\n      )}\n\n      {/* Render move categories if they have moves */}\n      {Object.values(learnset)\n        .filter((categoryMoves) => categoryMoves.moves.length)\n        .map((categoryMoves) => (\n          <PokemonMovesTable\n            key={categoryMoves.label}\n            moves={categoryMoves.moves}\n            label={categoryMoves.label}\n          />\n        ))}\n    </>\n  );\n};\nexport default PokemonMoves;\n","import type { Encounter, PokemonEncounter } from \"pokedex-promise-v2\";\n\nimport { games } from \"@/data/games.ts\";\n\ninterface EncounterList {\n  location: string;\n  details: Encounter[];\n}\n\n// Groups Pokémon encounter data by version name\nconst organizePokemonEncounters = (encounters: PokemonEncounter[]) => {\n  const groupedByVersion: Partial<Record<string, EncounterList[]>> = {};\n\n  // Iterate through all encounter locations\n  for (const encounter of encounters) {\n    // Each location has a list of versions with encounter methods and details\n    for (const versionDetail of encounter.version_details) {\n      const versionName = versionDetail.version.name;\n\n      // Skip versions not defined in the games list\n      if (!(versionName in games)) continue;\n\n      // Create the entry for this version if it doesn't exist yet\n      groupedByVersion[versionName] ??= [];\n\n      // Add this location to the correct version group\n      groupedByVersion[versionName].push({\n        location: encounter.location_area.name,\n        details: versionDetail.encounter_details,\n      });\n    }\n  }\n\n  return groupedByVersion;\n};\nexport default organizePokemonEncounters;\n","import { usePokemonLocations } from \"@/hooks/usePokeApi.ts\";\nimport organizePokemonEncounters from \"@/features/pokemon/utils/organizePokemonEncounters.ts\";\nimport { games } from \"@/data/games.ts\";\n\nimport Loader from \"@/components/Loader.tsx\";\n\nconst PokemonLocations = ({ id }: { id: number }) => {\n  const { data: encounters } = usePokemonLocations(id);\n\n  if (encounters === undefined)\n    return (\n      <div className=\"h-27\">\n        <Loader size={16} />\n      </div>\n    );\n\n  if (encounters.length === 0)\n    return (\n      <div className=\"p-2 sm:px-4\">\n        There seems to be no location data for this Pokémon. Try checking\n        another Pokemon from the same evolution line.\n      </div>\n    );\n\n  // Group encounters based on the version\n  const formattedEncounters = organizePokemonEncounters(encounters);\n\n  return (\n    <div className=\"space-y-4 p-2 sm:px-4\">\n      {Object.entries(games)\n        .filter(([versionName]) => formattedEncounters[versionName])\n        .map(([versionName, { label }]) => (\n          <div key={versionName}>\n            <h2 className=\"text-xl font-bold\">{label}</h2>\n\n            <ul>\n              {formattedEncounters[versionName]!.map(({ location }) => (\n                <li key={location} className=\"capitalize\">\n                  {location.split(\"-\").join(\" \")}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n    </div>\n  );\n};\nexport default PokemonLocations;\n","import { useEffect } from \"react\";\nimport { createFileRoute } from \"@tanstack/react-router\";\nimport { AxiosError } from \"axios\";\n\nimport { usePokemonDetailsParam } from \"@/features/pokemon/hooks/usePokemonDetailsParam.ts\";\nimport { usePokemon, usePokemonSpecies } from \"@/hooks/usePokeApi.ts\";\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\nimport { playAudio } from \"@/utils/playAudio.ts\";\nimport type { PokemonDetailsParams } from \"@/types/types.ts\";\n\nimport ErrorMessage from \"@/components/error/ErrorMessage.tsx\";\nimport TopButtons from \"@/features/pokemon/components/pokemonDetails/TopButtons.tsx\";\nimport PokemonImage from \"@/features/pokemon/components/pokemonDetails/PokemonImage.tsx\";\nimport PokemonName from \"@/features/pokemon/components/pokemonDetails/PokemonName.tsx\";\nimport ToggleShinyButton from \"@/features/pokemon/components/pokemonDetails/ToggleShinyButton.tsx\";\nimport PokemonCategory from \"@/features/pokemon/components/pokemonDetails/PokemonCategory.tsx\";\nimport PokemonTypesDisplay from \"@/features/pokemon/components/PokemonTypesDisplay.tsx\";\nimport PokemonFormButtons from \"@/features/pokemon/components/pokemonDetails/PokemonFormButtons.tsx\";\nimport PokemonAbilities from \"@/features/pokemon/components/pokemonDetails/PokemonAbilities.tsx\";\nimport PokemonStats from \"@/features/pokemon/components/pokemonDetails/PokemonStats.tsx\";\nimport PokemonEvolutionChain from \"@/features/pokemon/components/pokemonDetails/PokemonEvolutionChain.tsx\";\nimport GenerationText from \"@/components/GenerationText.tsx\";\nimport PokemonCatchRate from \"@/features/pokemon/components/pokemonDetails/PokemonCatchRate.tsx\";\nimport PokemonTypeEffectiveness from \"@/features/pokemon/components/pokemonDetails/PokemonTypeEffectiveness.tsx\";\nimport FlavorTextEntries from \"@/features/pokemon/components/pokemonDetails/FlavorTextEntries.tsx\";\nimport Accordion from \"@/components/Accordion.tsx\";\nimport PokemonMoves from \"@/features/pokemon/components/pokemonDetails/learnset/PokemonMoves.tsx\";\nimport PokemonLocations from \"@/features/pokemon/components/pokemonDetails/PokemonLocations.tsx\";\nimport Footer from \"@/components/Footer.tsx\";\n\nconst PokemonDetails = () => {\n  // Search Param states\n  const [displayShiny, setDisplayShiny] =\n    usePokemonDetailsParam(\"displayShiny\");\n  const [formIndex, setFormIndex] = usePokemonDetailsParam(\"form\");\n  // Indexing from 1 instead of 0 since this value can be seen by the user\n  const currentFormIndex = (formIndex ?? 1) - 1;\n\n  // Panel states\n  const [isLearnsetOpen, setLearnsetOpen] = usePokemonDetailsParam(\n    \"isLearnsetPanelOpen\",\n  );\n  const [isLocationsOpen, setLocationsOpen] = usePokemonDetailsParam(\n    \"isLocationsPanelOpen\",\n  );\n\n  // Fetching data\n  // Pokémon Species using the Path Param\n  const { pokemonId } = Route.useParams();\n  const { data: pokemonSpecies, error: errorPS } = usePokemonSpecies(\n    Number(pokemonId),\n  );\n\n  // Pokémon based on the selected form\n  const { data: pokemon, error: errorP } = usePokemon(\n    currentFormIndex === 0\n      ? // Using the Path Param since the first form has the same ID\n        Number(pokemonId)\n      : // Get the ID from Pokémon Species' variety index\n        getIdFromUrl(pokemonSpecies?.varieties[currentFormIndex].pokemon.url),\n  );\n\n  // Play the Pokémon's cry when the page first loads, or when the form is changed\n  useEffect(() => {\n    if (!pokemon?.cries.latest) return;\n    const { play, stop } = playAudio(pokemon.cries.latest);\n\n    void play();\n    return () => stop();\n  }, [pokemon?.cries.latest]);\n\n  // Display an error message if there is an error whole fetching data\n  if ((!pokemon || !pokemonSpecies) && (errorPS || errorP))\n    return (\n      <ErrorMessage\n        errors={[errorPS, errorP]\n          .filter((e) => e instanceof AxiosError)\n          .map((e) => e.message)}\n      />\n    );\n\n  return (\n    <>\n      {/* In React 19, you can now render the <title> tag in JSX */}\n      <title>{`Pokédex - ${capitalize(pokemon?.name ?? \"Loading\")}`}</title>\n\n      <TopButtons />\n\n      <div className=\"mx-auto max-w-3xl p-2 pb-4 sm:px-4 sm:pt-32 md:px-0 md:pt-18\">\n        <PokemonImage\n          key={`${currentFormIndex}${displayShiny ? \"-shiny\" : \"\"}`}\n          src={\n            // Default image is from Pokémon HOME\n            pokemon?.sprites.other.home[\n              // Depending on the displayShiny state, display a different image\n              `front_${displayShiny ? \"shiny\" : \"default\"}`\n            ] ??\n            // Official artwork as a fallback\n            pokemon?.sprites.other[\"official-artwork\"][\n              `front_${displayShiny ? \"shiny\" : \"default\"}`\n            ]\n          }\n          alt={pokemon?.name}\n        />\n\n        <div className=\"flex items-end justify-between px-2\">\n          <PokemonName\n            name={\n              pokemon?.name ??\n              pokemonSpecies?.varieties[currentFormIndex].pokemon?.name\n            }\n          />\n\n          <ToggleShinyButton\n            displayShiny={displayShiny ?? false}\n            setDisplayShiny={() =>\n              setDisplayShiny(displayShiny ? undefined : true)\n            }\n          />\n        </div>\n\n        <PokemonCategory\n          category={pokemonSpecies?.genera.find(\n            (genus) => genus.language.name === \"en\",\n          )}\n        />\n\n        <PokemonTypesDisplay\n          types={pokemon?.types}\n          className=\"mx-2 my-1 gap-2\"\n        />\n\n        <PokemonFormButtons\n          pokemonSpecies={pokemonSpecies?.varieties}\n          placeholderName={pokemon?.name}\n          currentForm={currentFormIndex}\n          handleClick={(index) =>\n            setFormIndex(index === 0 ? undefined : index + 1)\n          }\n        />\n\n        <PokemonAbilities abilities={pokemon?.abilities} />\n\n        <PokemonStats pokemonStats={pokemon?.stats} />\n\n        <PokemonEvolutionChain\n          id={getIdFromUrl(pokemonSpecies?.evolution_chain.url)}\n          pokemonName={pokemonSpecies?.name}\n        />\n\n        <GenerationText\n          generation={pokemonSpecies?.generation.name}\n          itemType=\"Pokémon\"\n        />\n\n        <PokemonCatchRate catchRate={pokemonSpecies?.capture_rate} />\n\n        <PokemonTypeEffectiveness\n          types={pokemon?.types.map((type) => type.type.name)}\n        />\n\n        {/* All english Dex descriptions */}\n        <FlavorTextEntries textEntries={pokemonSpecies?.flavor_text_entries} />\n\n        <Accordion\n          label=\"Learnset\"\n          initialIsOpen={isLearnsetOpen}\n          toggleOpen={() => setLearnsetOpen(isLearnsetOpen ? undefined : true)}\n        >\n          <PokemonMoves moves={pokemon?.moves} />\n        </Accordion>\n\n        <Accordion\n          label=\"Locations\"\n          initialIsOpen={isLocationsOpen}\n          toggleOpen={() =>\n            setLocationsOpen(isLocationsOpen ? undefined : true)\n          }\n        >\n          <PokemonLocations id={Number(pokemonId)} />\n        </Accordion>\n\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport const Route = createFileRoute(\"/pokemon/$pokemonId\")({\n  component: PokemonDetails,\n  validateSearch: (search) => ({ ...search }) as PokemonDetailsParams,\n  loaderDeps: ({ search: { form } }) => ({ form }),\n  loader: ({\n    context: { queryClient, pokeApi },\n    params: { pokemonId },\n    deps: { form },\n  }) => {\n    const pokemonIdAsNumber = Number(pokemonId);\n\n    // Display an error if the Pokémon ID is not a number\n    if (isNaN(pokemonIdAsNumber))\n      throw new Error(\"Pokémon ID must be a number\");\n\n    // Prefetch Pokémon Species data\n    void queryClient.ensureQueryData({\n      queryFn: () => pokeApi.getPokemonSpeciesByName(pokemonIdAsNumber),\n      queryKey: [\"pokemonSpecies\", pokemonIdAsNumber],\n    });\n\n    // Prefetch Pokémon location data\n    void queryClient.ensureQueryData({\n      queryFn: () =>\n        pokeApi.getResource(`/api/v2/pokemon/${pokemonIdAsNumber}/encounters`),\n      queryKey: [\"pokemonLocation\", pokemonIdAsNumber],\n    });\n\n    // Skip prefetching Pokémon data if a specific Pokémon form is selected,\n    // since the ID comes from Pokémon Species data, which isn't fetched yet\n    if (!form)\n      void queryClient.ensureQueryData({\n        queryFn: () => pokeApi.getPokemonByName(pokemonIdAsNumber),\n        queryKey: [\"pokemon\", pokemonIdAsNumber],\n      });\n  },\n  remountDeps: ({ params }) => params.pokemonId,\n});\n"],"x_google_ignoreList":[0,1,2,5,6],"mappings":"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"}
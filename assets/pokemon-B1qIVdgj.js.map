{"version":3,"file":"pokemon-B1qIVdgj.js","names":["useMemo","useAllItemsParam","useAllPokemonByGen","useAllPokemonByType","useStarredPokemon","ItemResource","useFilteredPokemon","allPokemon","$","_c","currentGen","currentType","onlyStarred","searchQuery","data","filteredByGen","isLoading","isLoadingFG","filteredByType","isLoadingFT","starredPokemonIds","t0","bb0","undefined","length","t1","t2","pg","Set","map","_temp","has","id","filter","ap","_temp2","filteredPokemon","p","includes","starredPokemon","t3","t4","query","replace","trim","p_0","name","toLowerCase","searchedPokemon","t5","t6","Boolean","t7","pokemonList","isFiltered","pt","pt_0","memo","useState","Link","usePokemon","ItemResource","Loader","PokemonTypesDisplay","CardProps","pokemon","PokemonCard","t0","$","_c","t1","id","name","data","isLoadingImage","setIsLoadingImage","t2","String","t3","pokemonId","t4","t5","Symbol","for","t6","t7","t8","replace","t9","t10","types","t11","t12","t13","displayName","useState","VirtuosoGrid","useAllPokemonSpecies","useFilteredPokemon","useScrollRestoration","PokemonCard","Footer","Loader","FilterErrorMessage","PokemonGrid","$","_c","data","allPokemon","isLoading","isLoadingAP","pokemonList","isLoadingFP","isFiltered","gridLoaded","setGridLoaded","t0","length","index","name","top","bottom","ready","t1","t2","t3","useEffect","useRouter","Sidebar","ScrollToTopButton","PokemonGrid","Route","SplitComponent","router","loadRouteChunk","routesByPath","component"],"sources":["../../src/features/pokemon/hooks/useFilteredPokemon.ts","../../src/features/pokemon/components/PokemonCard.tsx","../../src/features/pokemon/components/PokemonGrid.tsx","../../src/routes/pokemon/index.tsx?tsr-split=component"],"sourcesContent":["import { useMemo } from \"react\";\r\n\r\nimport { useAllItemsParam } from \"@/hooks/useAllItemsParam.ts\";\r\nimport { useAllPokemonByGen, useAllPokemonByType } from \"@/hooks/usePokeApi.ts\";\r\nimport { useStarredPokemon } from \"@/features/pokemon/hooks/useStarredPokemon.ts\";\r\nimport type { ItemResource } from \"@/types/types.ts\";\r\n\r\nexport const useFilteredPokemon = (allPokemon: ItemResource[] | undefined) => {\r\n  // Get the URL Params\r\n  const [currentGen] = useAllItemsParam(\"generation\");\r\n  const [currentType] = useAllItemsParam(\"type\");\r\n  const [onlyStarred] = useAllItemsParam(\"onlyStarred\");\r\n  const [searchQuery] = useAllItemsParam(\"q\");\r\n\r\n  // Fetch Pokémon filtered by gen/type\r\n  const { data: filteredByGen, isLoading: isLoadingFG } =\r\n    useAllPokemonByGen(currentGen);\r\n  const { data: filteredByType, isLoading: isLoadingFT } =\r\n    useAllPokemonByType(currentType);\r\n\r\n  // Get starred Pokémon\r\n  const { starredPokemonIds } = useStarredPokemon();\r\n\r\n  // Pokémon filtering\r\n  const filteredPokemon = useMemo(() => {\r\n    // Abort if the all Pokémon list hasn't fetched yet\r\n    if (!allPokemon) return;\r\n\r\n    // If there is a gen and a type selected\r\n    if (filteredByGen?.length && filteredByType?.length)\r\n      return filteredByGen.filter((pg) =>\r\n        new Set(filteredByType.map((pt) => pt.id)).has(pg.id),\r\n      );\r\n\r\n    // If there is a gen selected\r\n    if (filteredByGen?.length) return filteredByGen;\r\n\r\n    // If there is a type selected (still need to filter because\r\n    // the filteredByType doesn't return Pokémon species)\r\n    if (filteredByType?.length)\r\n      return allPokemon.filter((ap) =>\r\n        new Set(filteredByType.map((pt) => pt.id)).has(ap.id),\r\n      );\r\n\r\n    // No filtering\r\n    return allPokemon;\r\n  }, [allPokemon, filteredByGen, filteredByType]);\r\n\r\n  // Starred Pokémon (if needed)\r\n  const starredPokemon = useMemo(() => {\r\n    return onlyStarred && filteredPokemon\r\n      ? filteredPokemon.filter((p) => starredPokemonIds.includes(p.id))\r\n      : filteredPokemon;\r\n  }, [filteredPokemon, onlyStarred, starredPokemonIds]);\r\n\r\n  // Displayed Pokémon (after search query filtering, if needed)\r\n  const searchedPokemon = useMemo(() => {\r\n    // Removes non-alphanumerical characters from search query\r\n    const query = searchQuery?.replace(/[^0-9a-z]/gi, \"\").trim();\r\n\r\n    return starredPokemon && query?.length\r\n      ? starredPokemon.filter((p) =>\r\n          p.name.replace(\"-\", \"\").includes(query.toLowerCase()),\r\n        )\r\n      : starredPokemon;\r\n  }, [starredPokemon, searchQuery]);\r\n\r\n  return {\r\n    pokemonList: searchedPokemon,\r\n    isLoading: isLoadingFG || isLoadingFT,\r\n    isFiltered: Boolean(\r\n      currentGen ?? currentType ?? onlyStarred ?? searchQuery,\r\n    ),\r\n  };\r\n};\r\n","import { memo, useState } from \"react\";\nimport { Link } from \"@tanstack/react-router\";\n\nimport { usePokemon } from \"@/hooks/usePokeApi.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\nimport Loader from \"@/components/Loader.tsx\";\nimport PokemonTypesDisplay from \"@/features/pokemon/components/PokemonTypesDisplay.tsx\";\n\ninterface CardProps {\n  pokemon: ItemResource;\n}\n\nconst PokemonCard = memo(({ pokemon: { id, name } }: CardProps) => {\n  const { data: pokemon } = usePokemon(id);\n  const [isLoadingImage, setIsLoadingImage] = useState(true);\n\n  return (\n    <Link\n      to=\"/pokemon/$pokemonId\"\n      params={{ pokemonId: String(id) }}\n      className=\"group @container/card relative block rounded-xl bg-base-100 shadow-md transition-[background-color_shadow] hover:bg-base-200 hover:shadow-lg dark:bg-base-900 dark:shadow-none dark:hover:bg-base-800 dark:hover:shadow-none\"\n    >\n      {/* Gets the image from a raw link instead of waiting for */}\n      {/* the Pokémon object to download because it is faster */}\n      <img\n        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/home/${id}.png`}\n        alt={name}\n        decoding=\"async\"\n        onLoad={() => setIsLoadingImage(false)}\n        className=\"aspect-square w-full object-contain text-transparent\"\n      />\n\n      {/* Covers Pokémon image with the loader if the image hasn't loaded */}\n      {isLoadingImage ? (\n        <div className=\"absolute top-0 aspect-square w-full rounded-xl bg-base-100 transition-[background-color] group-hover:bg-base-200 dark:bg-base-900 dark:group-hover:bg-base-800\">\n          <Loader size={8} />\n        </div>\n      ) : null}\n\n      <div className=\"p-2 md:p-4\">\n        <h1 className=\"mb-1 text-xl font-bold text-nowrap capitalize max-md:px-1\">\n          {name.replace(\"-\", \" \")}\n        </h1>\n\n        <PokemonTypesDisplay\n          types={pokemon?.types}\n          className=\"-mx-6 scale-75 gap-1 @min-[180px]/card:-mx-7 @min-[200px]/card:-mx-3 @min-[200px]/card:scale-90 @min-[200px]/card:gap-2 @min-[235px]/card:mx-0 @min-[235px]/card:scale-100\"\n        />\n      </div>\n    </Link>\n  );\n});\nPokemonCard.displayName = \"PokemonCard\";\nexport default PokemonCard;\n","import { useState } from \"react\";\nimport { VirtuosoGrid } from \"react-virtuoso\";\n\nimport { useAllPokemonSpecies } from \"@/hooks/usePokeApi.ts\";\nimport { useFilteredPokemon } from \"@/features/pokemon/hooks/useFilteredPokemon.ts\";\nimport { useScrollRestoration } from \"@/hooks/useScrollRestoration.ts\";\n\nimport PokemonCard from \"@/features/pokemon/components/PokemonCard.tsx\";\nimport Footer from \"@/components/Footer.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\nimport FilterErrorMessage from \"@/components/error/FilterErrorMessage.tsx\";\n\nconst PokemonGrid = () => {\n  // Fetching data\n  const { data: allPokemon, isLoading: isLoadingAP } = useAllPokemonSpecies();\n  const {\n    pokemonList,\n    isLoading: isLoadingFP,\n    isFiltered,\n  } = useFilteredPokemon(allPokemon);\n\n  // Restore the scroll position when the grid loads\n  const [gridLoaded, setGridLoaded] = useState<boolean>(false);\n  useScrollRestoration(gridLoaded);\n\n  return (\n    <section className=\"@container/grid flex flex-col items-center p-4 max-sm:px-2 lg:absolute lg:right-0 lg:w-4/5 lg:max-w-[calc(100vw-248px)] lg:min-w-[calc(100vw-320px)] lg:pt-20 lg:pl-0\">\n      {!isLoadingAP && !isLoadingFP && pokemonList?.length ? (\n        <>\n          <VirtuosoGrid\n            totalCount={pokemonList.length}\n            itemContent={(index) => (\n              <PokemonCard\n                key={pokemonList[index].name}\n                pokemon={pokemonList[index]}\n              />\n            )}\n            useWindowScroll\n            increaseViewportBy={{ top: 1000, bottom: 1000 }}\n            readyStateChanged={(ready) => setGridLoaded(ready)}\n            className=\"w-full\"\n            listClassName=\"grid grid-cols-2 gap-2 @min-[475px]/grid:gap-4 @min-[580px]/grid:grid-cols-3 @min-[580px]/grid:gap-2 @min-[680px]/grid:gap-4 @min-[800px]/grid:grid-cols-4 @min-[800px]/grid:gap-2 @min-[900px]/grid:gap-4 @min-[1000px]/grid:grid-cols-5 @min-[1000px]/grid:gap-2 @min-[1080px]/grid:gap-4 @min-[1250px]/grid:grid-cols-6 @min-[1250px]/grid:gap-2 @min-[1300px]/grid:gap-4 @min-[1400px]/grid:grid-cols-7 @min-[1400px]/grid:gap-2 @min-[1500px]/grid:gap-4\"\n          />\n\n          {gridLoaded && <Footer />}\n        </>\n      ) : null}\n\n      {/* Cover with a loading screen while the data is fetching or the React Virtuoso grid is rendering */}\n      {isLoadingAP || isLoadingFP || (!gridLoaded && pokemonList?.length) ? (\n        <div className=\"fixed top-0 z-10 flex h-screen w-full items-center justify-center bg-base-50 dark:bg-base-950\">\n          <Loader size={24} displaysText={true} />\n        </div>\n      ) : null}\n\n      {!pokemonList?.length && isFiltered && (\n        <div className=\"top-0 lg:fixed lg:h-screen\">\n          <FilterErrorMessage itemType=\"Pokémon\" />\n        </div>\n      )}\n    </section>\n  );\n};\nexport default PokemonGrid;\n","import { useEffect } from \"react\";\nimport { createFileRoute, useRouter } from \"@tanstack/react-router\";\n\nimport type { AllItemsParams } from \"@/types/types.ts\";\n\nimport Sidebar from \"@/components/sidebar/Sidebar.tsx\";\nimport ScrollToTopButton from \"@/components/button/ScrollToTopButton.tsx\";\nimport PokemonGrid from \"@/features/pokemon/components/PokemonGrid.tsx\";\n\nconst AllPokemon = () => {\n  // Preload the individual Pokémon page\n  const router = useRouter();\n  useEffect(() => {\n    void router.loadRouteChunk(router.routesByPath[\"/pokemon/$pokemonId\"]);\n  }, [router]);\n\n  return (\n    <>\n      <Sidebar>\n        <Sidebar.Search itemType=\"Pokémon\" />\n        <Sidebar.GenerationFilter />\n        <Sidebar.TypeFilter />\n        <Sidebar.OnlyStarredToggle />\n        <Sidebar.ClearFilter />\n      </Sidebar>\n\n      <ScrollToTopButton />\n\n      <PokemonGrid />\n    </>\n  );\n};\n\nexport const Route = createFileRoute(\"/pokemon/\")({\n  component: AllPokemon,\n  validateSearch: (search) => ({ ...search }) as AllItemsParams,\n  loader: ({ context: { queryClient, pokeApi } }) =>\n    // Prefetch the list of all Pokémon Species\n    void queryClient.ensureQueryData({\n      queryFn: () => pokeApi.getPokemonSpeciesList(),\n      queryKey: [\"allPokemonSpecies\"],\n    }),\n});\n"],"mappings":"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"}
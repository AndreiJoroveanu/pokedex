{"version":3,"file":"pokemon-DBXK8Kym.js","names":["useMemo","useAllItemsParam","useAllPokemonByGen","useAllPokemonByType","useStarredPokemon","ItemResource","useFilteredPokemon","allPokemon","$","_c","currentGen","currentType","onlyStarred","searchQuery","data","filteredByGen","isLoading","isLoadingFG","filteredByType","isLoadingFT","starredPokemonIds","t0","bb0","undefined","length","t1","t2","pg","Set","map","_temp","has","id","filter","ap","_temp2","filteredPokemon","p","includes","starredPokemon","t3","t4","query","replace","trim","p_0","name","toLowerCase","searchedPokemon","t5","t6","Boolean","t7","pokemonList","isFiltered","pt","pt_0","useState","Link","usePokemon","ItemResource","Loader","PokemonTypesDisplay","CardProps","pokemon","PokemonCard","t0","$","_c","t1","id","name","data","isLoadingImage","setIsLoadingImage","t2","String","t3","pokemonId","t4","t5","Symbol","for","t6","t7","t8","replace","t9","t10","types","t11","t12","t13","t14","useState","VirtuosoGrid","useAllPokemonSpecies","useFilteredPokemon","useScrollRestoration","PokemonCard","Footer","Loader","FilterErrorMessage","PokemonGrid","$","_c","data","allPokemon","isLoading","isLoadingAP","pokemonList","isLoadingFP","isFiltered","gridLoaded","setGridLoaded","t0","length","index","name","top","bottom","ready","t1","t2","t3","useEffect","useRouter","Sidebar","ScrollToTopButton","PokemonGrid","Route","SplitComponent","router","loadRouteChunk","routesByPath","component"],"sources":["../../src/features/pokemon/hooks/useFilteredPokemon.ts","../../src/features/pokemon/components/PokemonCard.tsx","../../src/features/pokemon/components/PokemonGrid.tsx","../../src/routes/pokemon/index.tsx?tsr-split=component"],"sourcesContent":["import { useMemo } from \"react\";\n\nimport { useAllItemsParam } from \"@/hooks/useAllItemsParam.ts\";\nimport { useAllPokemonByGen, useAllPokemonByType } from \"@/hooks/usePokeApi.ts\";\nimport { useStarredPokemon } from \"@/features/pokemon/hooks/useStarredPokemon.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\nexport const useFilteredPokemon = (allPokemon: ItemResource[] | undefined) => {\n  // Get the URL Params\n  const [currentGen] = useAllItemsParam(\"generation\");\n  const [currentType] = useAllItemsParam(\"type\");\n  const [onlyStarred] = useAllItemsParam(\"onlyStarred\");\n  const [searchQuery] = useAllItemsParam(\"q\");\n\n  // Fetch Pokémon filtered by gen/type\n  const { data: filteredByGen, isLoading: isLoadingFG } =\n    useAllPokemonByGen(currentGen);\n  const { data: filteredByType, isLoading: isLoadingFT } =\n    useAllPokemonByType(currentType);\n\n  // Get starred Pokémon\n  const { starredPokemonIds } = useStarredPokemon();\n\n  // Pokémon filtering\n  const filteredPokemon = useMemo(() => {\n    // Abort if the all Pokémon list hasn't fetched yet\n    if (!allPokemon) return;\n\n    // If there is a gen and a type selected\n    if (filteredByGen?.length && filteredByType?.length)\n      return filteredByGen.filter((pg) =>\n        new Set(filteredByType.map((pt) => pt.id)).has(pg.id),\n      );\n\n    // If there is a gen selected\n    if (filteredByGen?.length) return filteredByGen;\n\n    // If there is a type selected (still need to filter because\n    // the filteredByType doesn't return Pokémon species)\n    if (filteredByType?.length)\n      return allPokemon.filter((ap) =>\n        new Set(filteredByType.map((pt) => pt.id)).has(ap.id),\n      );\n\n    // No filtering\n    return allPokemon;\n  }, [allPokemon, filteredByGen, filteredByType]);\n\n  // Starred Pokémon (if needed)\n  const starredPokemon = useMemo(() => {\n    return onlyStarred && filteredPokemon\n      ? filteredPokemon.filter((p) => starredPokemonIds.includes(p.id))\n      : filteredPokemon;\n  }, [filteredPokemon, onlyStarred, starredPokemonIds]);\n\n  // Displayed Pokémon (after search query filtering, if needed)\n  const searchedPokemon = useMemo(() => {\n    // Removes non-alphanumerical characters from search query\n    const query = searchQuery?.replace(/[^0-9a-z]/gi, \"\").trim();\n\n    return starredPokemon && query?.length\n      ? starredPokemon.filter((p) =>\n          p.name.replace(\"-\", \"\").includes(query.toLowerCase()),\n        )\n      : starredPokemon;\n  }, [starredPokemon, searchQuery]);\n\n  return {\n    pokemonList: searchedPokemon,\n    isLoading: isLoadingFG || isLoadingFT,\n    isFiltered: Boolean(\n      currentGen ?? currentType ?? onlyStarred ?? searchQuery,\n    ),\n  };\n};\n","import { useState } from \"react\";\r\nimport { Link } from \"@tanstack/react-router\";\r\n\r\nimport { usePokemon } from \"@/hooks/usePokeApi.ts\";\r\nimport type { ItemResource } from \"@/types/types.ts\";\r\n\r\nimport Loader from \"@/components/Loader.tsx\";\r\nimport PokemonTypesDisplay from \"@/features/pokemon/components/PokemonTypesDisplay.tsx\";\r\n\r\ninterface CardProps {\r\n  pokemon: ItemResource;\r\n}\r\n\r\nconst PokemonCard = ({ pokemon: { id, name } }: CardProps) => {\r\n  const { data: pokemon } = usePokemon(id);\r\n  const [isLoadingImage, setIsLoadingImage] = useState(true);\r\n\r\n  return (\r\n    <Link to=\"/pokemon/$pokemonId\" params={{ pokemonId: String(id) }}>\r\n      <article className=\"group @container/card relative rounded-xl bg-base-200 shadow-lg transition-[background-color_shadow] hover:bg-base-300 hover:shadow-xl dark:bg-base-800 dark:shadow-none dark:hover:bg-base-700 dark:hover:shadow-none\">\r\n        {/* Gets the image from a raw link instead of waiting for */}\r\n        {/* the Pokémon object to download because it is faster */}\r\n        <img\r\n          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/home/${id}.png`}\r\n          alt={name}\r\n          decoding=\"async\"\r\n          onLoad={() => setIsLoadingImage(false)}\r\n          className=\"aspect-square w-full object-contain text-transparent\"\r\n        />\r\n\r\n        {/* Covers Pokémon image with the loader if the image hasn't loaded */}\r\n        {isLoadingImage ? (\r\n          <div className=\"absolute top-0 aspect-square w-full rounded-xl bg-base-200 transition-[background-color] group-hover:bg-base-300 dark:bg-base-800 dark:group-hover:bg-base-700\">\r\n            <Loader size={8} />\r\n          </div>\r\n        ) : null}\r\n\r\n        <div className=\"p-2 md:p-4\">\r\n          <h1 className=\"mb-1 text-xl font-bold text-nowrap capitalize max-md:px-1\">\r\n            {name.replace(\"-\", \" \")}\r\n          </h1>\r\n\r\n          <PokemonTypesDisplay\r\n            types={pokemon?.types}\r\n            className=\"-mx-6 scale-75 gap-1 @min-[180px]/card:-mx-7 @min-[200px]/card:-mx-3 @min-[200px]/card:scale-90 @min-[200px]/card:gap-2 @min-[235px]/card:mx-0 @min-[235px]/card:scale-100\"\r\n          />\r\n        </div>\r\n      </article>\r\n    </Link>\r\n  );\r\n};\r\nexport default PokemonCard;\r\n","import { useState } from \"react\";\nimport { VirtuosoGrid } from \"react-virtuoso\";\n\nimport { useAllPokemonSpecies } from \"@/hooks/usePokeApi.ts\";\nimport { useFilteredPokemon } from \"@/features/pokemon/hooks/useFilteredPokemon.ts\";\nimport { useScrollRestoration } from \"@/hooks/useScrollRestoration.ts\";\n\nimport PokemonCard from \"@/features/pokemon/components/PokemonCard.tsx\";\nimport Footer from \"@/components/Footer.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\nimport FilterErrorMessage from \"@/components/error/FilterErrorMessage.tsx\";\n\nconst PokemonGrid = () => {\n  // Fetching data\n  const { data: allPokemon, isLoading: isLoadingAP } = useAllPokemonSpecies();\n  const {\n    pokemonList,\n    isLoading: isLoadingFP,\n    isFiltered,\n  } = useFilteredPokemon(allPokemon);\n\n  // Restore the scroll position when the grid loads\n  const [gridLoaded, setGridLoaded] = useState<boolean>(false);\n  useScrollRestoration(gridLoaded);\n\n  return (\n    <section className=\"@container/grid flex flex-col items-center p-4 max-sm:px-2 lg:absolute lg:right-0 lg:w-4/5 lg:max-w-[calc(100vw-248px)] lg:min-w-[calc(100vw-320px)] lg:pt-20 lg:pl-0\">\n      {!isLoadingAP && !isLoadingFP && pokemonList?.length ? (\n        <>\n          <VirtuosoGrid\n            totalCount={pokemonList.length}\n            itemContent={(index) => (\n              <PokemonCard\n                key={pokemonList[index].name}\n                pokemon={pokemonList[index]}\n              />\n            )}\n            useWindowScroll\n            increaseViewportBy={{ top: 1000, bottom: 1000 }}\n            readyStateChanged={(ready) => setGridLoaded(ready)}\n            className=\"w-full\"\n            listClassName=\"grid grid-cols-2 gap-2 @min-[475px]/grid:gap-4 @min-[580px]/grid:grid-cols-3 @min-[580px]/grid:gap-2 @min-[680px]/grid:gap-4 @min-[800px]/grid:grid-cols-4 @min-[800px]/grid:gap-2 @min-[900px]/grid:gap-4 @min-[1000px]/grid:grid-cols-5 @min-[1000px]/grid:gap-2 @min-[1080px]/grid:gap-4 @min-[1250px]/grid:grid-cols-6 @min-[1250px]/grid:gap-2 @min-[1300px]/grid:gap-4 @min-[1400px]/grid:grid-cols-7 @min-[1400px]/grid:gap-2 @min-[1500px]/grid:gap-4\"\n          />\n\n          {gridLoaded && <Footer />}\n        </>\n      ) : null}\n\n      {/* Cover with a loading screen while the data is fetching or the React Virtuoso grid is rendering */}\n      {isLoadingAP || isLoadingFP || (!gridLoaded && pokemonList?.length) ? (\n        <div className=\"fixed top-0 flex h-screen w-full items-center justify-center bg-base-100 dark:bg-base-900\">\n          <Loader size={24} displaysText={true} />\n        </div>\n      ) : null}\n\n      {!pokemonList?.length && isFiltered && (\n        <div className=\"top-0 lg:fixed lg:h-screen\">\n          <FilterErrorMessage itemType=\"Pokémon\" />\n        </div>\n      )}\n    </section>\n  );\n};\nexport default PokemonGrid;\n","import { useEffect } from \"react\";\nimport { createFileRoute, useRouter } from \"@tanstack/react-router\";\n\nimport type { AllItemsParams } from \"@/types/types.ts\";\n\nimport Sidebar from \"@/components/sidebar/Sidebar.tsx\";\nimport ScrollToTopButton from \"@/components/button/ScrollToTopButton.tsx\";\nimport PokemonGrid from \"@/features/pokemon/components/PokemonGrid.tsx\";\n\nconst AllPokemon = () => {\n  // Preload the individual Pokémon page\n  const router = useRouter();\n  useEffect(() => {\n    void router.loadRouteChunk(router.routesByPath[\"/pokemon/$pokemonId\"]);\n  }, [router]);\n\n  return (\n    <>\n      <Sidebar>\n        <Sidebar.Search itemType=\"Pokémon\" />\n        <Sidebar.GenerationFilter />\n        <Sidebar.TypeFilter />\n        <Sidebar.OnlyStarredToggle />\n        <Sidebar.ClearFilter />\n      </Sidebar>\n\n      <ScrollToTopButton />\n\n      <PokemonGrid />\n    </>\n  );\n};\n\nexport const Route = createFileRoute(\"/pokemon/\")({\n  component: AllPokemon,\n  validateSearch: (search) => ({ ...search }) as AllItemsParams,\n  loader: ({ context: { queryClient, pokeApi } }) =>\n    // Prefetch the list of all Pokémon Species\n    void queryClient.ensureQueryData({\n      queryFn: () => pokeApi.getPokemonSpeciesList(),\n      queryKey: [\"allPokemonSpecies\"],\n    }),\n});\n"],"mappings":"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"}
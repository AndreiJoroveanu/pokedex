{"version":3,"file":"pokemon-Cw1pVTQe.js","names":["useMemo","useAllItemsParam","useAllPokemonByGen","useAllPokemonByType","useStarredPokemon","ItemResource","useFilteredPokemon","allPokemon","$","_c","currentGen","currentType","onlyStarred","searchQuery","starredPokemonIds","data","filteredByGen","isLoading","isLoadingFG","filteredByType","isLoadingFT","t0","bb0","undefined","length","t1","t2","pg","Set","map","_temp","has","id","filter","ap","_temp2","filteredPokemon","p","includes","starredPokemon","t3","t4","query","replace","trim","p_0","name","toLowerCase","searchedPokemon","t5","t6","pokemonList","isLoadingFP","pt","pt_0","memo","useState","Link","usePokemon","ItemResource","Loader","PokemonTypesDisplay","CardProps","pokemon","PokemonCard","t0","$","_c","t1","id","name","data","isLoadingImage","setIsLoadingImage","t2","String","t3","pokemonId","t4","t5","Symbol","for","t6","t7","t8","replace","t9","t10","types","t11","t12","t13","displayName","useState","VirtuosoGrid","useAllPokemonSpecies","useFilteredPokemon","useScrollRestoration","PokemonCard","Footer","Loader","FilterErrorMessage","PokemonGrid","$","_c","data","allPokemon","isLoading","isLoadingAP","pokemonList","isLoadingFP","gridLoaded","setGridLoaded","t0","length","index","name","top","bottom","ready","t1","t2","t3","useEffect","useRouter","Sidebar","ScrollToTopButton","PokemonGrid","Route","SplitComponent","router","loadRouteChunk","routesByPath","component"],"sources":["../../src/features/pokemon/hooks/useFilteredPokemon.ts","../../src/features/pokemon/components/PokemonCard.tsx","../../src/features/pokemon/components/PokemonGrid.tsx","../../src/routes/pokemon/index.tsx?tsr-split=component"],"sourcesContent":["import { useMemo } from \"react\";\n\nimport { useAllItemsParam } from \"@/hooks/useAllItemsParam.ts\";\nimport { useAllPokemonByGen, useAllPokemonByType } from \"@/hooks/usePokeApi.ts\";\nimport { useStarredPokemon } from \"@/features/pokemon/hooks/useStarredPokemon.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\nexport const useFilteredPokemon = (allPokemon: ItemResource[] | undefined) => {\n  // Get the URL Params\n  const [currentGen] = useAllItemsParam(\"generation\");\n  const [currentType] = useAllItemsParam(\"type\");\n  const [onlyStarred] = useAllItemsParam(\"onlyStarred\");\n  const [searchQuery] = useAllItemsParam(\"q\");\n\n  // Get starred Pokémon\n  const { starredPokemonIds } = useStarredPokemon();\n\n  // Fetch Pokémon filtered by gen/type\n  const { data: filteredByGen, isLoading: isLoadingFG } =\n    useAllPokemonByGen(currentGen);\n  const { data: filteredByType, isLoading: isLoadingFT } =\n    useAllPokemonByType(currentType);\n\n  // Pokémon filtering\n  const filteredPokemon = useMemo(() => {\n    // Abort if the all Pokémon list hasn't fetched yet\n    if (!allPokemon) return;\n\n    // If there is a gen and a type selected\n    if (filteredByGen?.length && filteredByType?.length)\n      return filteredByGen.filter((pg) =>\n        new Set(filteredByType.map((pt) => pt.id)).has(pg.id),\n      );\n\n    // If there is a gen selected\n    if (filteredByGen?.length) return filteredByGen;\n\n    // If there is a type selected (still need to filter because\n    // the filteredByType doesn't return Pokémon species)\n    if (filteredByType?.length)\n      return allPokemon.filter((ap) =>\n        new Set(filteredByType.map((pt) => pt.id)).has(ap.id),\n      );\n\n    // No filtering\n    return allPokemon;\n  }, [allPokemon, filteredByGen, filteredByType]);\n\n  // Starred Pokémon (if needed)\n  const starredPokemon = useMemo(() => {\n    return onlyStarred && filteredPokemon\n      ? filteredPokemon.filter((p) => starredPokemonIds.includes(p.id))\n      : filteredPokemon;\n  }, [filteredPokemon, onlyStarred, starredPokemonIds]);\n\n  // Displayed Pokémon (after search query filtering, if needed)\n  const searchedPokemon = useMemo(() => {\n    // Removes non-alphanumerical characters from search query\n    const query = searchQuery?.replace(/[^0-9a-z]/gi, \"\").trim();\n\n    return starredPokemon && query?.length\n      ? starredPokemon.filter((p) =>\n          p.name.replace(\"-\", \"\").includes(query.toLowerCase()),\n        )\n      : starredPokemon;\n  }, [starredPokemon, searchQuery]);\n\n  return {\n    pokemonList: searchedPokemon,\n    isLoadingFP: isLoadingFG || isLoadingFT,\n  };\n};\n","import { memo, useState } from \"react\";\r\nimport { Link } from \"@tanstack/react-router\";\r\n\r\nimport { usePokemon } from \"@/hooks/usePokeApi.ts\";\r\nimport type { ItemResource } from \"@/types/types.ts\";\r\n\r\nimport Loader from \"@/components/Loader.tsx\";\r\nimport PokemonTypesDisplay from \"@/features/pokemon/components/PokemonTypesDisplay.tsx\";\r\n\r\ninterface CardProps {\r\n  pokemon: ItemResource;\r\n}\r\n\r\nconst PokemonCard = memo(({ pokemon: { id, name } }: CardProps) => {\r\n  const { data: pokemon } = usePokemon(id);\r\n  const [isLoadingImage, setIsLoadingImage] = useState(true);\r\n\r\n  return (\r\n    <Link\r\n      to=\"/pokemon/$pokemonId\"\r\n      params={{ pokemonId: String(id) }}\r\n      className=\"group @container/card relative block rounded-xl bg-base-100 shadow-md transition-[background-color_shadow] hover:bg-base-200 hover:shadow-lg dark:bg-base-900 dark:shadow-none dark:hover:bg-base-800 dark:hover:shadow-none\"\r\n    >\r\n      {/* Gets the image from a raw link instead of waiting for */}\r\n      {/* the Pokémon object to download because it is faster */}\r\n      <img\r\n        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/home/${id}.png`}\r\n        alt={name}\r\n        decoding=\"async\"\r\n        onLoad={() => setIsLoadingImage(false)}\r\n        className=\"aspect-square w-full object-contain text-transparent\"\r\n      />\r\n\r\n      {/* Covers Pokémon image with the loader if the image hasn't loaded */}\r\n      {isLoadingImage ? (\r\n        <div className=\"absolute top-0 aspect-square w-full rounded-xl bg-base-100 transition-[background-color] group-hover:bg-base-200 dark:bg-base-900 dark:group-hover:bg-base-800\">\r\n          <Loader size={8} />\r\n        </div>\r\n      ) : null}\r\n\r\n      <div className=\"p-2 md:p-4\">\r\n        <h1 className=\"mb-1 text-xl font-bold text-nowrap capitalize max-md:px-1\">\r\n          {name.replace(\"-\", \" \")}\r\n        </h1>\r\n\r\n        <PokemonTypesDisplay\r\n          types={pokemon?.types}\r\n          className=\"-mx-6 scale-75 gap-1 @min-[180px]/card:-mx-7 @min-[200px]/card:-mx-3 @min-[200px]/card:scale-90 @min-[200px]/card:gap-2 @min-[235px]/card:mx-0 @min-[235px]/card:scale-100\"\r\n        />\r\n      </div>\r\n    </Link>\r\n  );\r\n});\r\nPokemonCard.displayName = \"PokemonCard\";\r\nexport default PokemonCard;\r\n","import { useState } from \"react\";\nimport { VirtuosoGrid } from \"react-virtuoso\";\n\nimport { useAllPokemonSpecies } from \"@/hooks/usePokeApi.ts\";\nimport { useFilteredPokemon } from \"@/features/pokemon/hooks/useFilteredPokemon.ts\";\nimport { useScrollRestoration } from \"@/hooks/useScrollRestoration.ts\";\n\nimport PokemonCard from \"@/features/pokemon/components/PokemonCard.tsx\";\nimport Footer from \"@/components/Footer.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\nimport FilterErrorMessage from \"@/components/error/FilterErrorMessage.tsx\";\n\nconst PokemonGrid = () => {\n  // Fetching data\n  const { data: allPokemon, isLoading: isLoadingAP } = useAllPokemonSpecies();\n  const { pokemonList, isLoadingFP } = useFilteredPokemon(allPokemon);\n\n  // Restore the scroll position when the grid loads\n  const [gridLoaded, setGridLoaded] = useState<boolean>(false);\n  useScrollRestoration(gridLoaded);\n\n  return (\n    <section className=\"@container/grid flex flex-col items-center p-4 max-sm:px-2 lg:absolute lg:right-0 lg:w-4/5 lg:max-w-[calc(100vw-248px)] lg:min-w-[calc(100vw-320px)] lg:pt-20 lg:pl-0\">\n      {!isLoadingAP && !isLoadingFP && pokemonList?.length ? (\n        <>\n          <VirtuosoGrid\n            totalCount={pokemonList.length}\n            itemContent={(index) => (\n              <PokemonCard\n                key={pokemonList[index].name}\n                pokemon={pokemonList[index]}\n              />\n            )}\n            useWindowScroll\n            increaseViewportBy={{ top: 1000, bottom: 1000 }}\n            readyStateChanged={(ready) => setGridLoaded(ready)}\n            className=\"w-full\"\n            listClassName=\"grid grid-cols-2 gap-2 @min-[475px]/grid:gap-4 @min-[580px]/grid:grid-cols-3 @min-[580px]/grid:gap-2 @min-[680px]/grid:gap-4 @min-[800px]/grid:grid-cols-4 @min-[800px]/grid:gap-2 @min-[900px]/grid:gap-4 @min-[1000px]/grid:grid-cols-5 @min-[1000px]/grid:gap-2 @min-[1080px]/grid:gap-4 @min-[1250px]/grid:grid-cols-6 @min-[1250px]/grid:gap-2 @min-[1300px]/grid:gap-4 @min-[1400px]/grid:grid-cols-7 @min-[1400px]/grid:gap-2 @min-[1500px]/grid:gap-4\"\n          />\n\n          {gridLoaded && <Footer />}\n        </>\n      ) : null}\n\n      {/* Cover with a loading screen while the data is fetching or the React Virtuoso grid is rendering */}\n      {isLoadingAP || isLoadingFP || (!gridLoaded && pokemonList?.length) ? (\n        <div className=\"fixed top-0 z-10 flex h-screen w-full items-center justify-center bg-base-50 dark:bg-base-950\">\n          <Loader size={24} displaysText={true} />\n        </div>\n      ) : null}\n\n      {!pokemonList?.length && !isLoadingFP && (\n        <div className=\"top-0 lg:fixed lg:h-screen\">\n          <FilterErrorMessage itemType=\"Pokémon\" />\n        </div>\n      )}\n    </section>\n  );\n};\nexport default PokemonGrid;\n","import { useEffect } from \"react\";\nimport { createFileRoute, useRouter } from \"@tanstack/react-router\";\n\nimport type { AllItemsParams } from \"@/types/types.ts\";\n\nimport Sidebar from \"@/components/sidebar/Sidebar.tsx\";\nimport ScrollToTopButton from \"@/components/button/ScrollToTopButton.tsx\";\nimport PokemonGrid from \"@/features/pokemon/components/PokemonGrid.tsx\";\n\nconst AllPokemon = () => {\n  // Preload the individual Pokémon page\n  const router = useRouter();\n  useEffect(() => {\n    void router.loadRouteChunk(router.routesByPath[\"/pokemon/$pokemonId\"]);\n  }, [router]);\n\n  return (\n    <>\n      <Sidebar>\n        <Sidebar.Search itemType=\"Pokémon\" />\n        <Sidebar.GenerationFilter />\n        <Sidebar.TypeFilter />\n        <Sidebar.OnlyStarredToggle />\n        <Sidebar.ClearFilter />\n      </Sidebar>\n\n      <ScrollToTopButton />\n\n      <PokemonGrid />\n    </>\n  );\n};\n\nexport const Route = createFileRoute(\"/pokemon/\")({\n  component: AllPokemon,\n  validateSearch: (search) => ({ ...search }) as AllItemsParams,\n  loader: ({ context: { queryClient, pokeApi } }) =>\n    // Prefetch the list of all Pokémon Species\n    void queryClient.ensureQueryData({\n      queryFn: () => pokeApi.getPokemonSpeciesList(),\n      queryKey: [\"allPokemonSpecies\"],\n    }),\n});\n"],"mappings":"+WAOA,MAAagG,EAAqBU,GAAA,CAAA,IAAAH,GAAAA,EAAAA,EAAAA,GAAA,GAAA,CAEhC,CAAA7F,EAAA,CAAqBT,EAAiB,aAAa,CACnD,CAAAU,EAAA,CAAsBV,EAAiB,OAAO,CAC9C,CAAAW,EAAA,CAAsBX,EAAiB,cAAc,CACrD,CAAAY,EAAA,CAAsBZ,EAAiB,IAAI,CAG3C,CAAAa,oBAAA,CAA8BV,GAAmB,CAGjD,CAAAqG,KAAAzF,EAAA2F,UAAAzF,EAAA,CACEhB,EAAmBQ,EAAW,CAChC,CAAA+F,KAAAtF,EAAAwF,UAAAvF,EAAA,CACEjB,EAAoBQ,EAAY,CAACsG,EAAA3F,IAAA,CAAA,GAAA,CAK5BoF,EAAU,CAAEO,EAAA1F,IAAAA,GAAO,MAAAD,GAAA,CAAA,GAGpBN,GAAakG,QAAY/F,GAAc+F,OAAQ,CAAA,IAAAM,EAAA,GAAAjB,EAAA,KAAAvF,GAAAuF,EAAA,KAAApF,EAAA,CAAA,IAAAsG,EAAAlB,EAAA,KAAApF,EAEMsG,EAAAlB,EAAA,IAD3BkB,EAAA9F,GAC1B,IAAAC,IAAQT,EAAcU,IAAAC,EAAmB,EAAAC,IAAMJ,EAAE0C,GAAI,CAAAkC,EAAA,GAAApF,EAAAoF,EAAA,GAAAkB,GADhDD,EAAAxG,EAAaiB,OAAQwF,EAE3B,CAAAlB,EAAA,GAAAvF,EAAAuF,EAAA,GAAApF,EAAAoF,EAAA,GAAAiB,CAAA,MAAAA,EAAAjB,EAAA,GAFDU,EAAOO,EAEL,MAAAlG,GAAA,CAAA,GAGAN,GAAakG,OAAA,CAAUD,EAAOjG,EAAc,MAAAM,GAAA,CAAA,GAI5CH,GAAc+F,OAAA,CAAA,IAAAM,EAAA,GAAAjB,EAAA,KAAAG,GAAAH,EAAA,KAAApF,EAAA,CAAA,IAAAsG,EAAAlB,EAAA,KAAApF,EAEuCsG,EAAAlB,EAAA,IAD9BkB,EAAAvF,GACvB,IAAAN,IAAQT,EAAcU,IAAAM,EAAmB,EAAAJ,IAAMG,EAAEmC,GAAI,CAAAkC,EAAA,GAAApF,EAAAoF,EAAA,GAAAkB,GADhDD,EAAAd,EAAUzE,OAAQwF,EAExB,CAAAlB,EAAA,GAAAG,EAAAH,EAAA,GAAApF,EAAAoF,EAAA,GAAAiB,CAAA,MAAAA,EAAAjB,EAAA,GAFDU,EAAOO,EAEL,MAAAlG,GAAA,CAGJ2F,EAAOP,CAAW,CArBpB,IAAAtE,EAAwB6E,EAsBwBO,EAAAC,EAAAlB,EAAA,MAAAnE,GAAAmE,EAAA,MAAA3F,GAAA2F,EAAA,MAAAzF,GAIvC2G,EAAA7G,GAAewB,EAClBA,EAAeH,OAAAI,GAAevB,EAAiBwB,SAAUD,EAACgC,GAAI,CAAC,CAC/DjC,EAAemE,EAAA,IAAAnE,EAAAmE,EAAA,IAAA3F,EAAA2F,EAAA,IAAAzF,EAAAyF,EAAA,IAAAkB,GAAAA,EAAAlB,EAAA,IAFnBiB,EAAOC,EADT,IAAAlF,EAAuBiF,EAI+BE,EAAA5C,EAAA,GAAAyB,EAAA,MAAA1F,GAAA0F,EAAA,MAAAhE,EAAA,CAKpD,IAAAG,EAAc7B,GAAWwE,QAAA,cAAyB,GAAE,CAAAzC,MAAA,CAE7CkC,EAAAvC,GAAkBG,GAAKwE,OAC1B3E,EAAcN,OAAAY,GACZR,EAAC+E,KAAA/B,QAAc,IAAK,GAAG,CAAA/C,SAAUI,EAAKK,aAAc,CACtD,CAAC,CACDR,EAAcgE,EAAA,IAAA1F,EAAA0F,EAAA,IAAAhE,EAAAgE,EAAA,IAAAzB,CAAA,MAAAA,EAAAyB,EAAA,IAJlBmB,EAAO5C,EAJT,IAAA9B,EAAwB0E,EAaT3C,EAAA7D,GAAeE,EAAW8D,EACxC,OADwCqB,EAAA,MAAAvD,GAAAuD,EAAA,MAAAxB,GAFlCG,EAAA,CAAA2B,YACQ7D,EAAe8D,YACf/B,CAA0B,EACxCwB,EAAA,IAAAvD,EAAAuD,EAAA,IAAAxB,EAAAwB,EAAA,IAAArB,GAAAA,EAAAqB,EAAA,IAHMrB,CAIR,EAhEiC,SAAApD,EAAAuB,EAAA,CAAA,OAwBSA,EAAEgB,EAAA,CAxBX,SAAAlC,EAAAmB,EAAA,CAAA,OAkCSD,EAAEgB,EAAA,uBC5B7C,MAAM6B,GAAAA,EAAAA,EAAAA,MAAmBe,GAAA,CAAA,IAAAV,GAAAA,EAAAA,EAAAA,GAAA,GAAA,CAAC,CAAAxC,QAAAyD,EAAA,CAAAP,EAAW,CAAA5C,KAAA+C,OAAA,CAAAI,EACnC,CAAAf,KAAA1C,EAAA,CAA0BL,EAAWW,EAAG,CACxC,CAAAG,EAAAC,EAAA,EAAA,EAAA,EAAA,UAA4C,GAAc,CAKjCgD,EAAA9C,OAAON,EAAG,CAAAqD,EAAAnB,EAAA,KAAAkB,EAAEC,EAAAnB,EAAA,IAAzBmB,EAAA,CAAA7C,UAAa4C,CAAU,EAAElB,EAAA,GAAAkB,EAAAlB,EAAA,GAAAmB,GAM1B,IAAA5C,EAAA,CAAA,oFAAA,EAAuFT,EAAE,IAAA,CAAM,CAAAU,EAAAwB,EAAA,KAAAvB,OAAAC,IAAA,4BAAA,EAG5FF,EAAAA,IAAMN,EAAiB,GAAO,CAAA8B,EAAA,GAAAxB,GAAAA,EAAAwB,EAAA,GAAA,IAAArB,EAAAqB,EAAA,KAAAa,GAAAb,EAAA,KAAAzB,GAJxCI,GAAAA,EAAAA,EAAAA,KAAA,MAAA,CACO,IAAAJ,EACAsC,IAAAA,EACI,SAAA,QACD,OAAArC,EACE,UAAA,wDACV,CAAAwB,EAAA,GAAAa,EAAAb,EAAA,GAAAzB,EAAAyB,EAAA,GAAArB,GAAAA,EAAAqB,EAAA,GAAA,IAAApB,EAAAoB,EAAA,KAAA/B,EAOMW,EAAAoB,EAAA,IAJPpB,EAAAX,GAAAA,EAAAA,EAAAA,KACC,MAAA,CAAe,UAAA,oLACZ,EAAA,CAAa,KAAA,CAAA,EAChB,EAAM,CAAA,KACA+B,EAAA,GAAA/B,EAAA+B,EAAA,GAAApB,GAAA,IAAAC,EAAAmB,EAAA,KAAAa,EAImBhC,EAAAmB,EAAA,IAAtBnB,EAAAgC,EAAI/B,QAAS,IAAK,IAAI,CAAAkB,EAAA,GAAAa,EAAAb,EAAA,GAAAnB,GAAA,IAAAE,EAAAiB,EAAA,MAAAnB,EACpBE,EAAAiB,EAAA,KAFLjB,GAAAA,EAAAA,EAAAA,KAAA,KAAA,CAAc,UAAA,qEACXF,GACE,CAAAmB,EAAA,IAAAnB,EAAAmB,EAAA,IAAAjB,GAGI,IAAAC,EAAAxB,GAAOyB,MAAOC,EAAAc,EAAA,MAAAhB,EAErBE,EAAAc,EAAA,KAHFd,GAAAA,EAAAA,EAAAA,KAAC,EAAA,CACQ,MAAAF,EACG,UAAA,8KACV,CAAAgB,EAAA,IAAAhB,EAAAgB,EAAA,IAAAd,GAAA,IAAAC,EAAAa,EAAA,MAAAd,GAAAc,EAAA,MAAAjB,GARJI,GAAAA,EAAAA,EAAAA,MAAA,MAAA,CAAe,UAAA,uBACbJ,EAIAG,CAAAA,GAII,CAAAc,EAAA,IAAAd,EAAAc,EAAA,IAAAjB,EAAAiB,EAAA,IAAAb,GAAAA,EAAAa,EAAA,IAAA,IAAAZ,EACD,OADCY,EAAA,MAAAb,GAAAa,EAAA,MAAAmB,GAAAnB,EAAA,MAAArB,GAAAqB,EAAA,MAAApB,GA/BRQ,GAAAA,EAAAA,EAAAA,MAAC,EAAA,CACI,GAAA,sBACK,OAAA+B,EACE,UAAA,yOAIVxC,EASCC,EAMDO,IAUK,CAAAa,EAAA,IAAAb,EAAAa,EAAA,IAAAmB,EAAAnB,EAAA,IAAArB,EAAAqB,EAAA,IAAApB,EAAAoB,EAAA,IAAAZ,GAAAA,EAAAY,EAAA,IAhCPZ,CAkCH,EAAC,CACFO,EAAYN,YAAc,cAC1B,IAAA,EAAeM,WC1Cf,MAAM6B,EAAcA,IAAA,CAAA,IAAAxB,GAAAA,EAAAA,EAAAA,GAAA,GAAA,CAElB,CAAAE,KAAAC,EAAAC,UAAAC,EAAA,CAAqDb,GAAsB,CAC3E,CAAAc,cAAAC,cAAA,CAAqCd,EAAmBU,EAAW,CAGnE,CAAAK,EAAAC,EAAA,EAAA,EAAA,EAAA,UAAoC,GAAwB,CAC5Df,EAAqBc,EAAW,CAAA,IAAAE,EAAAV,EAAA,KAAAQ,GAAAR,EAAA,KAAAK,GAAAL,EAAA,KAAAO,GAAAP,EAAA,KAAAM,GAI3BI,EAAA,CAACL,GAAW,CAAKE,GAAeD,GAAWK,QAAAA,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EAAAA,EAAAA,EAAAA,KAEvC,EAAA,CACa,WAAAL,EAAWK,OACV,YAAAC,IAAAA,EAAAA,EAAAA,KACV,EAAA,CAEU,QAAAN,EAAYM,EAAAA,EADhBN,EAAYM,GAAKC,KAG1B,CACA,gBAAA,GACoB,mBAAA,CAAAC,IAAA,IAAAC,OAAA,GAA0B,EAC3B,kBAAAC,GAAWP,EAAcO,EAAK,CACvC,UAAA,SACI,cAAA,icAGf,CAAAR,IAAAA,EAAAA,EAAAA,KAAe,EAAA,CAAA,EAAQ,CAAA,EAAC,CAAA,KAErBR,EAAA,GAAAQ,EAAAR,EAAA,GAAAK,EAAAL,EAAA,GAAAO,EAAAP,EAAA,GAAAM,EAAAN,EAAA,GAAAU,GAAAA,EAAAV,EAAA,GAAA,IAAAiB,EAAAjB,EAAA,KAAAQ,GAAAR,EAAA,KAAAK,GAAAL,EAAA,KAAAO,GAAAP,EAAA,KAAAM,GAAAK,QAGPM,EAAAZ,GAAeE,GAAgB,CAACC,GAAcF,GAAWK,QAAAA,EAAAA,EAAAA,KACxD,MAAA,CAAe,UAAA,mHACZ,EAAA,CAAa,KAAA,GAAkB,aAAA,IAClC,EAAM,CAAA,KACAX,EAAA,GAAAQ,EAAAR,EAAA,GAAAK,EAAAL,EAAA,GAAAO,EAAAP,EAAA,GAAAM,GAAAK,OAAAX,EAAA,GAAAiB,GAAAA,EAAAjB,EAAA,GAAA,IAAAkB,EAAAlB,EAAA,MAAAO,GAAAP,EAAA,MAAAM,GAAAK,QAEPO,EAAA,CAACZ,GAAWK,QAAA,CAAaJ,IAAAA,EAAAA,EAAAA,KACxB,MAAA,CAAe,UAAA,gDACZ,EAAA,CAA4B,SAAA,SAAA,EAC/B,EACD,CAAAP,EAAA,IAAAO,EAAAP,EAAA,IAAAM,GAAAK,OAAAX,EAAA,IAAAkB,GAAAA,EAAAlB,EAAA,IAAA,IAAAmB,EACO,OADPnB,EAAA,MAAAU,GAAAV,EAAA,MAAAiB,GAAAjB,EAAA,MAAAkB,GAjCHC,GAAAA,EAAAA,EAAAA,MAAA,UAAA,CAAmB,UAAA,kLAChBT,EAsBAO,EAMAC,IAKO,CAAAlB,EAAA,IAAAU,EAAAV,EAAA,IAAAiB,EAAAjB,EAAA,IAAAkB,EAAAlB,EAAA,IAAAmB,GAAAA,EAAAnB,EAAA,IAlCVmB,CAoCH,EACD,IAAA,EAAeK,WCpDyD,MAAAE,EAErDA,IAAAA,CAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,CAEjB,EAAeL,GAAW,CAAA,EAAA,EAAA,EAAA,KAAA,GAGf,EAAA,EAAA,GAAA,EAAA,EAAA,KAFD,EAAA,IAAA,CACHM,EAAM,eAAgBA,EAAM,aAAc,uBAAuB,EACrE,EAAA,CAACA,CAAM,EAAC,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,mBAFD,EAEP,EAAS,CAAA,IAAA,EAeP,OAfO,EAAA,KAAA,OAAA,IAAA,4BAAA,EAGV,GAAA,EAAA,EAAA,MAAA,EAAA,SAAA,CAAA,SAAA,YACG,EAAA,CAAA,SAAA,WACC,EAAA,OAAA,CAAyB,SAAA,SAAA,EACzB,WAAA,EAAA,iBAAA,CAAA,EACA,WAAA,EAAA,WAAA,CAAA,EACA,WAAA,EAAA,kBAAA,CAAA,EACA,WAAA,EAAA,YAAA,CAAA,EACF,GAEA,WAAC,EAAA,CAAA,EAED,WAAC,EAAA,CAAA,EAAW,GAAA,CACX,EAAA,GAAA,GAAA,EAAA,EAAA,GAZH,CAcH"}
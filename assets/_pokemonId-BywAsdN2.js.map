{"version":3,"file":"_pokemonId-BywAsdN2.js","names":["ForwardRef","SparklesIcon","ForwardRef","StarIcon","ForwardRef","useEffect","useRef","useNavigate","useSearch","orderSearchParams","PokemonDetailsParams","pokemonDetailsUrl","usePokemonDetailsParam","key","$","_c","t0","Symbol","for","from","fullSearch","latestSearchRef","t1","t2","current","t3","navigate","t4","select","search","undefined","value","t5","value_0","updatedParams","paramAlreadyExists","Boolean","versionGroup","orderedParams","to","replace","resetScroll","mask","isDexEntriesPanelOpen","isLearnsetPanelOpen","isLocationsPanelOpen","viewTransition","setValue","t6","const","playAudio","src","audio","Audio","volume","Number","localStorage","getItem","play","stop","pause","currentTime","ForwardRef","getRouteApi","StarIcon","StarIconSolid","StarIconOutline","useStarredPokemon","Button","route","StarButton","$","_c","pokemonId","useParams","pokemonIdAsNumber","Number","starredPokemonIds","toggleStarredPokemonIds","t0","t1","includes","t2","BackButton","StarButton","TopButtons","$","_c","t0","Symbol","for","useState","Loader","ImageProps","src","alt","PokemonImage","t0","$","_c","isLoadingImage","setIsLoadingImage","t1","undefined","t2","t3","Symbol","for","t4","t5","t6","t7","SparklesIcon","SparklesIconSolid","SparklesIconOutline","Button","ButtonProps","displayShiny","setDisplayShiny","ToggleShinyButton","t0","$","_c","t1","t2","t3","Genus","PokemonCategory","t0","$","_c","category","t1","genus","t2","Variety","Button","FormButtonProps","pokemonSpecies","currentForm","handleClick","index","PokemonFormButtons","t0","$","_c","t1","Symbol","for","t2","map","form","pokemon","name","split","join","PokemonAbility","usePokemonAbility","getIdFromUrl","capitalize","AbilityProps","ability","PokemonAbilityDisplay","t0","$","_c","t1","url","data","abilityData","t2","name","is_hidden","t3","t4","flavor_text_entries","slice","reverse","find","_temp","flavor_text","t5","t6","entry","language","PokemonAbility","PokemonAbilityDisplay","Loader","AbilitiesProps","abilities","PokemonAbilities","t0","$","_c","t1","length","t2","t3","Array","from","Map","slice","reverse","map","_temp","values","_temp2","t4","t5","a","ability","name","stats","label","color","Fragment","StatElement","stats","StatsProps","pokemonStats","PokemonStats","t0","$","_c","t1","Symbol","for","t2","map","stat","index","label","base_stat","backgroundColor","color","width","t3","t4","_temp","reduce","_temp2","t5","stat_0","acc","cur","EvolutionDetail","capitalize","formatEvolutionMethod","details","length","map","detail","conditions","triggerConditions","Record","trade","shed","spin","trigger","name","push","min_level","item","held_item","gender","min_happiness","min_affection","min_beauty","known_move","known_move_type","party_species","party_type","trade_species","location","time_of_day","needs_overworld_rain","turn_upside_down","join","Chain","EvolutionDetail","getIdFromUrl","formatEvolutionMethod","ItemResource","Evolution","evolutionMethod","ReturnTypes","previous","next","extractData","node","evolutionDetails","name","species","id","Number","url","getEvolutionData","chain","pokemonName","traverse","parent","evolves_to","map","pokemon","evolution_details","forEach","child","Fragment","Link","useEvolutionChain","getEvolutionData","ItemResource","ChainProps","id","pokemonName","Evolution","evolutionMethod","PokemonEvolutionText","t0","$","_c","pokemon","t1","String","t2","pokemonId","t3","name","t4","t5","formatEvolutions","pokemonList","length","slice","map","PokemonEvolutionChain","data","chain","Symbol","for","next","previous","bb0","CatchRateProps","catchRate","PokemonCatchRate","t0","$","_c","t1","Math","pow","t2","toFixed","probability","t3","t4","typeEffectiveness","Record","normal","fighting","ghost","flying","rock","bug","psychic","dark","fairy","ground","grass","electric","ice","poison","water","steel","fire","dragon","typeEffectiveness","getTypeEffectivenessData","types","multipliers","Record","categories","label","normal","weak","resistant","immune","attackingType","Object","keys","multiplier","defendingType","push","getTypeEffectivenessData","Loader","TypeDisplay","TypesProps","types","CategoryProps","title","multipliers","Record","EffectivenessCategory","t0","$","_c","t1","length","map","type","PokemonTypeEffectiveness","Symbol","for","t2","t3","t4","categories","Object","values","t5","types_0","label","t6","games","Record","label","red","blue","yellow","gold","silver","crystal","ruby","sapphire","emerald","firered","leafgreen","diamond","pearl","platinum","heartgold","soulsilver","black","white","x","y","sun","moon","sword","shield","scarlet","violet","NamedAPIResource","usePokemonDetailsParam","games","capitalize","CollapsingPanel","Loader","Entry","flavor_text","language","version","EntriesProps","textEntries","FlavorTextEntry","t0","$","_c","entry","t1","name","label","t2","t3","FlavorTextEntries","isOpen","setIsOpen","sortedEntries","filter","_temp","reverse","Symbol","for","length","undefined","slice","map","_temp2","t4","t5","entry_0","MoveElement","getIdFromUrl","ItemResource","Moves","label","moves","level","Learnset","Record","filterLearnsetData","currentVersionGroup","learnset","levelUpMoves","machineMoves","eggMoves","tutorMoves","forEach","move","version_group_details","vg","version_group","name","moveData","id","Number","url","level_learned_at","move_learn_method","push","sort","a","b","Link","ChevronRightIcon","useMove","ItemResource","TypeDisplay","MoveCategoryDisplay","RowProps","move","level","displayLevel","PokemonMoveTableRow","t0","$","_c","data","moveData","id","t1","String","t2","moveId","t3","t4","name","split","join","t5","t6","type","t7","damage_class","t8","power","t9","t10","accuracy","t11","t12","pp","t13","t14","Symbol","for","t15","ItemResource","PokemonMoveTableRow","MovesProps","moves","level","label","PokemonMovesTable","t0","$","_c","t1","t2","Symbol","for","t3","t10","t4","t5","t6","t7","t8","t9","t11","t12","t13","move","name","map","t14","t15","MoveElement","usePokemonDetailsParam","filterLearnsetData","versionGroups","Loader","Button","PokemonMovesTable","MovesProps","moves","PokemonMoves","t0","$","_c","versionGroup","setVersionGroup","currentVersionIndex","t1","Symbol","for","length","t2","t3","t4","group","some","move","version_group_details","vg","version_group","name","availableVersionGroups","Object","entries","filter","selectedVersionGroup","learnset","map","index","group_0","t5","label","undefined","values","_temp","_temp2","categoryMoves","categoryMoves_0","Encounter","PokemonEncounter","games","EncounterList","location","details","organizePokemonEncounters","encounters","groupedByVersion","Partial","Record","encounter","versionDetail","version_details","versionName","version","name","push","location_area","encounter_details","usePokemonLocations","games","organizePokemonEncounters","Loader","PokemonLocations","t0","$","_c","id","data","encounters","undefined","t1","Symbol","for","length","t2","formattedEncounters","Object","entries","map","t3","versionName","t4","label","_temp","location","split","join","useEffect","AxiosError","usePokemonDetailsParam","usePokemon","usePokemonSpecies","getIdFromUrl","capitalize","playAudio","ErrorMessage","TopButtons","PokemonImage","ToggleShinyButton","PokemonCategory","PokemonTypesDisplay","PokemonFormButtons","PokemonAbilities","PokemonStats","PokemonEvolutionChain","GenerationText","PokemonCatchRate","PokemonTypeEffectiveness","FlavorTextEntries","CollapsingPanel","PokemonMoves","PokemonLocations","Footer","Route","SplitComponent","displayShiny","setDisplayShiny","formIndex","setFormIndex","currentFormIndex","isLearnsetOpen","setLearnsetOpen","isLocationsOpen","setLocationsOpen","pokemonId","useParams","data","pokemonSpecies","error","errorPS","Number","pokemon","errorP","varieties","url","cries","latest","play","stop","filter","e","map","message","name","sprites","other","home","split","join","undefined","genera","find","genus","language","types","index","abilities","stats","evolution_chain","generation","capture_rate","type","flavor_text_entries","moves","component"],"sources":["../../node_modules/@heroicons/react/24/outline/esm/ChevronRightIcon.js","../../node_modules/@heroicons/react/24/outline/esm/SparklesIcon.js","../../node_modules/@heroicons/react/24/outline/esm/StarIcon.js","../../src/features/pokemon/hooks/usePokemonDetailsParam.ts","../../src/utils/playAudio.ts","../../node_modules/@heroicons/react/24/solid/esm/SparklesIcon.js","../../node_modules/@heroicons/react/24/solid/esm/StarIcon.js","../../src/features/pokemon/components/pokemonDetails/StarButton.tsx","../../src/features/pokemon/components/pokemonDetails/TopButtons.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonImage.tsx","../../src/features/pokemon/components/pokemonDetails/ToggleShinyButton.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonCategory.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonFormButtons.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonAbilityDisplay.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonAbilities.tsx","../../src/data/stats.ts","../../src/features/pokemon/components/pokemonDetails/PokemonStats.tsx","../../src/features/pokemon/utils/formatEvolutionMethod.ts","../../src/features/pokemon/utils/getEvolutionData.ts","../../src/features/pokemon/components/pokemonDetails/PokemonEvolutionChain.tsx","../../src/features/pokemon/components/pokemonDetails/PokemonCatchRate.tsx","../../src/data/typeEffectiveness.ts","../../src/features/pokemon/utils/getTypeEffectivenessData.ts","../../src/features/pokemon/components/pokemonDetails/PokemonTypeEffectiveness.tsx","../../src/data/games.ts","../../src/features/pokemon/components/pokemonDetails/FlavorTextEntries.tsx","../../src/features/pokemon/utils/filterLearnsetData.ts","../../src/features/pokemon/components/pokemonDetails/learnset/PokemonMoveTableRow.tsx","../../src/features/pokemon/components/pokemonDetails/learnset/PokemonMovesTable.tsx","../../src/features/pokemon/components/pokemonDetails/learnset/PokemonMoves.tsx","../../src/features/pokemon/utils/organizePokemonEncounters.ts","../../src/features/pokemon/components/pokemonDetails/PokemonLocations.tsx","../../src/routes/pokemon/$pokemonId.tsx?tsr-split=component"],"sourcesContent":["import * as React from \"react\";\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m8.25 4.5 7.5 7.5-7.5 7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction SparklesIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM16.894 20.567 16.5 21.75l-.394-1.183a2.25 2.25 0 0 0-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 0 0 1.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 0 0 1.423 1.423l1.183.394-1.183.394a2.25 2.25 0 0 0-1.423 1.423Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(SparklesIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction StarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(StarIcon);\nexport default ForwardRef;","import { useEffect, useRef } from \"react\";\nimport { useNavigate, useSearch } from \"@tanstack/react-router\";\n\nimport { orderSearchParams } from \"@/utils/orderSearchParams.ts\";\nimport type { PokemonDetailsParams } from \"@/types/types.ts\";\n\nconst pokemonDetailsUrl = \"/pokemon/$pokemonId\";\n\nexport const usePokemonDetailsParam = <K extends keyof PokemonDetailsParams>(\n  key: K,\n) => {\n  // Store latest search params in a ref to avoid unnecessary rerenders\n  const fullSearch = useSearch({ from: pokemonDetailsUrl });\n  const latestSearchRef = useRef(fullSearch);\n  useEffect(() => void (latestSearchRef.current = fullSearch), [fullSearch]);\n\n  const navigate = useNavigate({ from: pokemonDetailsUrl });\n\n  // Get specific param's value from URL\n  const value = useSearch({\n    from: pokemonDetailsUrl,\n    select: (search) => search[key] ?? undefined,\n  });\n\n  const setValue = (value: PokemonDetailsParams[K]) => {\n    const updatedParams = { ...latestSearchRef.current };\n\n    const paramAlreadyExists = Boolean(updatedParams[key]);\n\n    updatedParams[key] = value;\n\n    // Reset versionGroup if it exists and the form param is changed\n    if (key === \"form\" && updatedParams.versionGroup)\n      delete updatedParams.versionGroup;\n\n    // Order URL Params only if the changed param didn't already exist\n    const orderedParams = paramAlreadyExists\n      ? updatedParams\n      : orderSearchParams(updatedParams, [\n          \"form\",\n          \"displayShiny\",\n          \"versionGroup\",\n          \"isDexEntriesPanelOpen\",\n          \"isLearnsetPanelOpen\",\n          \"isLocationsPanelOpen\",\n        ]);\n\n    void navigate({\n      to: \".\",\n      search: orderedParams,\n      replace: true,\n      resetScroll: false,\n      // Need to imperatively set the mask as to keep search params in sync\n      mask: {\n        to: \".\",\n        search: {\n          ...orderedParams,\n          isDexEntriesPanelOpen: undefined,\n          isLearnsetPanelOpen: undefined,\n          isLocationsPanelOpen: undefined,\n        },\n      },\n      // Don't display the view transition while toggling app panels\n      viewTransition:\n        key !== \"isDexEntriesPanelOpen\" &&\n        key !== \"isLearnsetPanelOpen\" &&\n        key !== \"isLocationsPanelOpen\",\n    });\n  };\n\n  return [value, setValue] as const;\n};\n","export const playAudio = (src: string) => {\n  const audio = new Audio(src);\n  audio.volume = 0.02 * Number(localStorage.getItem(\"volume\") ?? 5);\n\n  const play = async () => {\n    try {\n      await audio.play();\n    } catch {\n      // Fail silently if playback is blocked\n    }\n  };\n\n  const stop = () => {\n    audio.pause();\n    audio.currentTime = 0;\n  };\n\n  return { play, stop };\n};\n","import * as React from \"react\";\nfunction SparklesIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M9 4.5a.75.75 0 0 1 .721.544l.813 2.846a3.75 3.75 0 0 0 2.576 2.576l2.846.813a.75.75 0 0 1 0 1.442l-2.846.813a3.75 3.75 0 0 0-2.576 2.576l-.813 2.846a.75.75 0 0 1-1.442 0l-.813-2.846a3.75 3.75 0 0 0-2.576-2.576l-2.846-.813a.75.75 0 0 1 0-1.442l2.846-.813A3.75 3.75 0 0 0 7.466 7.89l.813-2.846A.75.75 0 0 1 9 4.5ZM18 1.5a.75.75 0 0 1 .728.568l.258 1.036c.236.94.97 1.674 1.91 1.91l1.036.258a.75.75 0 0 1 0 1.456l-1.036.258c-.94.236-1.674.97-1.91 1.91l-.258 1.036a.75.75 0 0 1-1.456 0l-.258-1.036a2.625 2.625 0 0 0-1.91-1.91l-1.036-.258a.75.75 0 0 1 0-1.456l1.036-.258a2.625 2.625 0 0 0 1.91-1.91l.258-1.036A.75.75 0 0 1 18 1.5ZM16.5 15a.75.75 0 0 1 .712.513l.394 1.183c.15.447.5.799.948.948l1.183.395a.75.75 0 0 1 0 1.422l-1.183.395c-.447.15-.799.5-.948.948l-.395 1.183a.75.75 0 0 1-1.422 0l-.395-1.183a1.5 1.5 0 0 0-.948-.948l-1.183-.395a.75.75 0 0 1 0-1.422l1.183-.395c.447-.15.799-.5.948-.948l.395-1.183A.75.75 0 0 1 16.5 15Z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(SparklesIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction StarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(StarIcon);\nexport default ForwardRef;","import { getRouteApi } from \"@tanstack/react-router\";\nimport { StarIcon as StarIconSolid } from \"@heroicons/react/24/solid\";\nimport { StarIcon as StarIconOutline } from \"@heroicons/react/24/outline\";\n\nimport { useStarredPokemon } from \"@/features/pokemon/hooks/useStarredPokemon.ts\";\n\nimport Button from \"@/components/button/Button.tsx\";\n\nconst route = getRouteApi(\"/pokemon/$pokemonId\");\n\nconst StarButton = () => {\n  const { pokemonId } = route.useParams();\n  const pokemonIdAsNumber = Number(pokemonId);\n  const { starredPokemonIds, toggleStarredPokemonIds } = useStarredPokemon();\n\n  return (\n    <Button\n      onClick={() => toggleStarredPokemonIds(pokemonIdAsNumber)}\n      style=\"gold\"\n      className=\"pointer-events-auto ml-auto flex items-center gap-2 px-4\"\n    >\n      {starredPokemonIds.includes(pokemonIdAsNumber) ? (\n        <>\n          <StarIconSolid className=\"size-4\" /> Starred\n        </>\n      ) : (\n        <>\n          <StarIconOutline className=\"size-4\" /> Star\n        </>\n      )}\n    </Button>\n  );\n};\nexport default StarButton;\n","import BackButton from \"@/components/button/BackButton.tsx\";\nimport StarButton from \"@/features/pokemon/components/pokemonDetails/StarButton.tsx\";\n\nconst TopButtons = () => (\n  <div className=\"pointer-events-none sticky top-4 z-20 flex w-full px-2 sm:fixed sm:top-20 sm:px-4\">\n    <BackButton />\n    <StarButton />\n  </div>\n);\nexport default TopButtons;\n","import { useState } from \"react\";\n\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface ImageProps {\n  src: string | null | undefined;\n  alt: string | undefined;\n}\n\nconst PokemonImage = ({ src, alt }: ImageProps) => {\n  const [isLoadingImage, setIsLoadingImage] = useState(true);\n\n  return (\n    <div className=\"relative\">\n      <img\n        src={src ?? undefined}\n        alt={alt ?? \"\"}\n        decoding=\"async\"\n        onLoad={() => setIsLoadingImage(false)}\n        className=\"mx-auto aspect-square max-h-128 w-full object-contain text-transparent\"\n      />\n\n      {/* Display a message if the selected Form doesn't have an image (the src is null) */}\n      {src === null && (\n        <div className=\"absolute top-0 flex aspect-square max-h-128 w-full flex-col items-center justify-center gap-4 bg-base-100 transition-[background-color] dark:bg-base-900\">\n          <h2 className=\"text-center text-2xl font-bold sm:text-3xl\">\n            This Pokémon Form does not have an image\n          </h2>\n\n          <p className=\"text-center font-semibold text-base-500 sm:text-lg dark:text-base-400\">\n            Please try another Form by using one of the buttons above.\n          </p>\n        </div>\n      )}\n\n      {/* Covers the image with a loader if the image hasn't loaded */}\n      {(isLoadingImage || src === undefined) && src !== null && (\n        <div className=\"absolute top-0 aspect-square max-h-128 w-full bg-base-100 dark:bg-base-900\">\n          <Loader size={24} displaysText={true} />\n        </div>\n      )}\n    </div>\n  );\n};\nexport default PokemonImage;\n","import { SparklesIcon as SparklesIconSolid } from \"@heroicons/react/24/solid\";\nimport { SparklesIcon as SparklesIconOutline } from \"@heroicons/react/24/outline\";\n\nimport Button from \"@/components/button/Button.tsx\";\n\ninterface ButtonProps {\n  displayShiny: boolean;\n  setDisplayShiny: () => void;\n}\n\nconst ToggleShinyButton = ({ displayShiny, setDisplayShiny }: ButtonProps) => (\n  <Button\n    onClick={setDisplayShiny}\n    style={displayShiny ? \"gold\" : \"normal\"}\n    className=\"flex items-center gap-2 px-4 text-nowrap\"\n  >\n    {displayShiny ? (\n      <SparklesIconSolid className=\"size-4\" />\n    ) : (\n      <SparklesIconOutline className=\"size-4\" />\n    )}\n    Shiny Art\n  </Button>\n);\nexport default ToggleShinyButton;\n","import type { Genus } from \"pokedex-promise-v2\";\n\nconst PokemonCategory = ({ category }: { category: Genus | undefined }) => (\n  <h2 className=\"mx-2 text-lg font-semibold text-base-600 transition-[color] dark:text-base-400\">\n    {category?.genus ?? \"Loading...\"}\n  </h2>\n);\nexport default PokemonCategory;\n","import type { Variety } from \"pokedex-promise-v2\";\n\nimport Button from \"@/components/button/Button.tsx\";\n\ninterface FormButtonProps {\n  pokemonSpecies: Variety[] | undefined;\n  currentForm: number;\n  handleClick: (index: number) => void;\n}\n\nconst PokemonFormButtons = ({\n  pokemonSpecies,\n  currentForm,\n  handleClick,\n}: FormButtonProps) => (\n  <>\n    <h2 className=\"ml-2 text-lg font-semibold sm:ml-4\">Current Form:</h2>\n\n    {pokemonSpecies ? (\n      <div className=\"-mx-2 flex flex-nowrap gap-2 overflow-x-scroll p-2 pt-1 sm:-mx-4 sm:px-4 md:-mx-2 md:mask-x-from-99% md:mask-x-to-100% md:px-2\">\n        {pokemonSpecies.map((form, index) => (\n          <Button\n            key={form.pokemon.name}\n            onClick={() => handleClick(index)}\n            disabled={currentForm === index}\n            style={currentForm === index ? \"indigo\" : \"normal\"}\n            className=\"z-10 px-4 text-nowrap capitalize disabled:cursor-default\"\n          >\n            {form.pokemon.name.split(\"-\").join(\" \")}\n          </Button>\n        ))}\n      </div>\n    ) : (\n      <div className=\"mt-1 mb-2 h-10 w-full animate-pulse rounded-xl bg-base-500/50\" />\n    )}\n  </>\n);\nexport default PokemonFormButtons;\n","import type { PokemonAbility } from \"pokedex-promise-v2\";\n\nimport { usePokemonAbility } from \"@/hooks/usePokeApi.ts\";\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\ninterface AbilityProps {\n  ability: PokemonAbility;\n}\n\nconst PokemonAbilityDisplay = ({ ability }: AbilityProps) => {\n  const { data: abilityData } = usePokemonAbility(\n    getIdFromUrl(ability.ability.url),\n  );\n\n  return (\n    <div>\n      <h3 className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n        {`${capitalize(ability.ability.name)}${ability.is_hidden ? \" (Hidden)\" : \"\"}`}\n      </h3>\n\n      <p>\n        {abilityData\n          ? (abilityData?.flavor_text_entries\n              .slice()\n              .reverse()\n              .find((entry) => entry.language.name === \"en\")?.flavor_text ??\n            \"No description available\")\n          : \"Loading...\"}\n      </p>\n    </div>\n  );\n};\nexport default PokemonAbilityDisplay;\n","import type { PokemonAbility } from \"pokedex-promise-v2\";\n\nimport PokemonAbilityDisplay from \"@/features/pokemon/components/pokemonDetails/PokemonAbilityDisplay.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface AbilitiesProps {\n  abilities: PokemonAbility[] | undefined;\n}\n\nconst PokemonAbilities = ({ abilities }: AbilitiesProps) => (\n  <>\n    <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">\n      {abilities?.length === 1 ? \"Ability:\" : \"Abilities:\"}\n    </h2>\n\n    <div className=\"mb-2 flex max-w-lg flex-col gap-4 rounded-xl bg-base-200 p-2 pb-3 shadow-lg transition-[background-color] sm:px-4 dark:bg-base-800 dark:shadow-none\">\n      {abilities ? (\n        // Deduplicates abilities by ability name\n        Array.from(\n          new Map(\n            abilities\n              // Reverse to preserve only the first occurrence in case of duplicates\n              .slice()\n              .reverse()\n              .map((a) => [a.ability.name, a]),\n          ).values(),\n        )\n          // Reverse back to preserve the original ability order\n          .reverse()\n          .map((ability) => (\n            <PokemonAbilityDisplay\n              key={ability.ability.name}\n              ability={ability}\n            />\n          ))\n      ) : (\n        <div className=\"h-24\">\n          <Loader size={16} />\n        </div>\n      )}\n    </div>\n  </>\n);\nexport default PokemonAbilities;\n","export const stats: { label: string; color: string }[] = [\n  { label: \"HP\", color: \"#9ee865\" },\n  { label: \"Attack\", color: \"#f5de69\" },\n  { label: \"Defense\", color: \"#f09a65\" },\n  { label: \"Sp. Atk\", color: \"#66d8f6\" },\n  { label: \"Sp. Def\", color: \"#899eea\" },\n  { label: \"Speed\", color: \"#e46cca\" },\n];\n","import { Fragment } from \"react\";\nimport type { StatElement } from \"pokedex-promise-v2\";\n\nimport { stats } from \"@/data/stats.ts\";\n\ninterface StatsProps {\n  pokemonStats: StatElement[] | undefined;\n}\n\nconst PokemonStats = ({ pokemonStats }: StatsProps) => (\n  <>\n    <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">Base Stats:</h2>\n\n    <div className=\"mb-4 max-w-lg rounded-xl bg-base-200 p-2 pt-3 shadow-lg transition-[background-color] sm:px-4 dark:bg-base-800 dark:shadow-none\">\n      <div className=\"grid grid-cols-[auto_auto_1fr] gap-2\">\n        {stats?.map((stat, index) => (\n          <Fragment key={stat.label}>\n            {/* Stat name */}\n            <h3 className=\"font-semibold capitalize\">{stat.label}:</h3>\n\n            {/* Stat number */}\n            {pokemonStats ? (\n              <p className=\"w-8 text-end\">\n                {pokemonStats[index].base_stat ?? 0}\n              </p>\n            ) : (\n              <div className=\"my-auto -mr-2 h-5 w-8 animate-pulse rounded-l-sm bg-base-500/50\" />\n            )}\n\n            {/* Stat bar */}\n            {pokemonStats ? (\n              <div className=\"relative my-auto h-5\">\n                <div\n                  style={{ backgroundColor: stats[index].color }}\n                  className=\"absolute h-full w-full rounded-sm opacity-50 brightness-125 transition-[filter] dark:brightness-75\"\n                />\n\n                <div\n                  style={{\n                    width: `${((pokemonStats[index].base_stat ?? 0) / 255) * 100}%`,\n                    backgroundColor: stats[index].color,\n                  }}\n                  className=\"absolute h-full rounded-sm opacity-75 brightness-90 saturate-125 transition-[filter] dark:brightness-110\"\n                />\n              </div>\n            ) : (\n              <div className=\"my-auto h-5 w-full animate-pulse rounded-r-sm bg-base-500/50\" />\n            )}\n          </Fragment>\n        ))}\n      </div>\n\n      {pokemonStats ? (\n        <h3 className=\"pt-2 font-semibold\">\n          {`Base Stat Total: ${\n            pokemonStats\n              .map((stat) => stat.base_stat)\n              .reduce((acc, cur) => acc + cur, 0) ?? 0\n          }`}\n        </h3>\n      ) : (\n        <div className=\"mt-2 mb-1 h-5 w-36 animate-pulse rounded-sm bg-base-500/50\" />\n      )}\n    </div>\n  </>\n);\nexport default PokemonStats;\n","import type { EvolutionDetail } from \"pokedex-promise-v2\";\n\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nconst formatEvolutionMethod = (details: EvolutionDetail[]) => {\n  if (!details.length) return \"\";\n\n  // prettier-ignore\n  return details.map((detail) => {\n    const conditions: string[] = [];\n\n    // Evolution trigger lookup\n    const triggerConditions: Record<string, string> = {\n      \"level-up\": \"when leveled up\",\n      \"strong-style-move\": \"when leveled up\", // Overqwil\n      trade: \"when traded\",\n      shed: \"at level 20, alongside Ninjask\", // Shedinja\n      spin: \"while holding a Sweet when the player spins and strikes a pose or gets dizzy\", // Alcremie\n      \"tower-of-darkness\": \"when shown the Scroll of Darkness\", // Urshifu Single Strike Style\n      \"tower-of-waters\": \"when shown the Scroll of Waters\", // Urshifu Rapid Strike Style\n      \"three-critical-hits\": \"after landing three critical hits in a single battle\", // Sirfetch'd\n      \"take-damage\": \"after taking 49 HP damage and traveling under the rock arch in Dusty Bowl\", // Runerigus\n      \"recoil-damage\": \"after losing at least 294 HP from recoil damage without fainting\", // Basculegion\n    };\n\n    // Apply trigger condition if it exists\n    if (detail.trigger.name in triggerConditions) conditions.push(triggerConditions[detail.trigger.name]);\n\n    // Level-based evolutions\n    if (detail.min_level) conditions.push(`at level ${detail.min_level}`);\n\n    // Item-based evolutions\n    if (detail.item) conditions.push(`when exposed to a ${capitalize(detail.item.name)}`);\n    if (detail.held_item) conditions.push(`while holding a ${capitalize(detail.held_item.name)}`);\n\n    // Gender-based evolutions\n    if (detail.gender === 1) conditions.push(\"while being female\");\n    else if (detail.gender === 2) conditions.push(\"while being male\");\n\n    // Stat-based evolutions\n    if (detail.min_happiness) conditions.push(`with high happiness`);\n    if (detail.min_affection) conditions.push(`with high affection`);\n    if (detail.min_beauty) conditions.push(`with its Beautiful condition high enough`);\n\n    // Move-based evolutions\n    if (detail.known_move) conditions.push(`while knowing ${capitalize(detail.known_move.name)}`);\n    if (detail.known_move_type) conditions.push(`while knowing a ${capitalize(detail.known_move_type.name)}-type move`);\n\n    // Party-based evolutions\n    if (detail.party_species) conditions.push(`with a ${capitalize(detail.party_species.name)} in the party`);\n    if (detail.party_type) conditions.push(`with a ${capitalize(detail.party_type.name)}-type Pokémon in the party`);\n\n    if (detail.trade_species) conditions.push(`for a ${capitalize(detail.trade_species.name)}`);\n    if (detail.location) conditions.push(`in ${capitalize(detail.location.name)}`);\n    if (detail.time_of_day) conditions.push(`during ${detail.time_of_day}`);\n    if (detail.needs_overworld_rain) conditions.push(`when raining`);\n\n    // Special case (Malamar)\n    if (detail.turn_upside_down) conditions.push(`when leveled up while holding the console upside down`);\n\n    return conditions.join(\" \");\n  })\n  .join(\" or \");\n};\nexport default formatEvolutionMethod;\n","import type { Chain, EvolutionDetail } from \"pokedex-promise-v2\";\n\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport formatEvolutionMethod from \"@/features/pokemon/utils/formatEvolutionMethod.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\ninterface Evolution extends ItemResource {\n  evolutionMethod: string;\n}\n\ninterface ReturnTypes {\n  previous: Evolution | null;\n  next: Evolution[];\n}\n\n// Extract the Pokémon name and the ID from the URL\nconst extractData = (node: Chain, evolutionDetails: EvolutionDetail[]) => ({\n  name: node.species.name,\n  id: Number(getIdFromUrl(node.species.url)),\n  // A string detailing how another Pokémon evolves/evolved into this Pokémon\n  evolutionMethod: formatEvolutionMethod(evolutionDetails),\n});\n\nconst getEvolutionData = (chain: Chain, pokemonName: string): ReturnTypes => {\n  let previous: Evolution | null = null; // Previous Pokémon in the evolution chain\n  let next: Evolution[] = []; // Next Pokémon(s) in the evolution chain\n\n  // Recursively traverses the evolution chain to find relevant data\n  const traverse = (node: Chain, parent: Evolution | null = null) => {\n    // If the current Pokémon is found in the evolution line\n    if (node.species.name === pokemonName) {\n      previous = parent; // Store its previous evolution\n      // Store its next evolutions\n      next = node.evolves_to.map((pokemon) =>\n        extractData(pokemon, pokemon.evolution_details),\n      );\n      return;\n    }\n    // Continue searching in the evolution tree for each possible next evolution\n    node.evolves_to.forEach((child) =>\n      traverse(child, extractData(node, child.evolution_details)),\n    );\n  };\n\n  // Start the recursive traversal from the root of the evolution chain\n  traverse(chain);\n\n  return { previous, next };\n};\nexport default getEvolutionData;\n","import { Fragment } from \"react\";\nimport { Link } from \"@tanstack/react-router\";\n\nimport { useEvolutionChain } from \"@/hooks/usePokeApi.ts\";\nimport getEvolutionData from \"@/features/pokemon/utils/getEvolutionData.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\ninterface ChainProps {\n  id: number | undefined;\n  pokemonName: string | undefined;\n}\n\ninterface Evolution extends ItemResource {\n  evolutionMethod: string;\n}\n\n// Link to the respective Pokémon page and the evolution description\nconst PokemonEvolutionText = ({ pokemon }: { pokemon: Evolution }) => (\n  <>\n    <Link\n      to=\"/pokemon/$pokemonId\"\n      params={{ pokemonId: String(pokemon.id) }}\n      draggable=\"false\"\n      className=\"capitalize underline underline-offset-4 transition-[color] hover:text-blue-600 focus:text-blue-600 dark:hover:text-blue-400 dark:focus:text-blue-400\"\n    >\n      {pokemon.name}\n    </Link>\n    {` ${pokemon.evolutionMethod || \"(no data available)\"}`}\n  </>\n);\n\n// Format the list of evolutions\nconst formatEvolutions = (pokemonList: Evolution[]) => {\n  // If this Pokémon has one evolution branch after it\n  if (pokemonList.length === 1)\n    return <PokemonEvolutionText pokemon={pokemonList[0]} />;\n\n  // If this Pokémon has two evolution branches after it\n  if (pokemonList.length === 2)\n    return (\n      <>\n        <PokemonEvolutionText pokemon={pokemonList[0]} />, or{\" \"}\n        <PokemonEvolutionText pokemon={pokemonList[1]} />\n      </>\n    );\n\n  // If this Pokémon has three or more evolution branches after it\n  return (\n    <>\n      {pokemonList.slice(0, pokemonList.length - 1).map((pokemon) => (\n        <Fragment key={pokemon.name}>\n          <PokemonEvolutionText pokemon={pokemon} />,{\" \"}\n        </Fragment>\n      ))}\n      {\" or \"}\n      <PokemonEvolutionText pokemon={pokemonList[pokemonList.length - 1]} />\n    </>\n  );\n};\n\nconst PokemonEvolutionChain = ({ id, pokemonName }: ChainProps) => {\n  const { data: chain } = useEvolutionChain(id);\n\n  // If the data hasn't arrived yet\n  if (!chain || !pokemonName) return <p>Loading...</p>;\n\n  // Calling the function to get the evolution data\n  const { previous, next } = getEvolutionData(chain.chain, pokemonName);\n\n  // If this Pokémon doesn't evolve at all\n  if (!previous && !next.length)\n    return <p className=\"mx-2\">This Pokémon does not evolve.</p>;\n\n  // If this Pokémon is a base form\n  if (!previous)\n    return (\n      <p className=\"mx-2\">\n        This Pokémon evolves into {formatEvolutions(next)}.\n      </p>\n    );\n\n  // If this Pokémon is fully evolved\n  if (!next.length)\n    return (\n      <p className=\"mx-2\">\n        This Pokémon evolves from <PokemonEvolutionText pokemon={previous} />.\n      </p>\n    );\n\n  // If this Pokémon is a middle evolution\n  return (\n    <p className=\"mx-2\">\n      This Pokémon evolves from <PokemonEvolutionText pokemon={previous} />, and\n      evolves into {formatEvolutions(next)}.\n    </p>\n  );\n};\nexport default PokemonEvolutionChain;\n","interface CatchRateProps {\n  catchRate: number | undefined;\n}\n\nconst PokemonCatchRate = ({ catchRate }: CatchRateProps) => {\n  // Simplified (but still accurate) formula for catching the Pokémon\n  // at full HP with a normal Pokéball based on its catch rate\n  const probability = (Math.pow((catchRate ?? 0) / 765, 0.75) * 100).toFixed(2);\n\n  return (\n    <p className=\"m-2\">\n      {catchRate ? (\n        <>\n          <span className=\"font-bold text-base-700 transition-[color] dark:text-base-300\">\n            Catch Rate:\n          </span>\n\n          {` ${catchRate} (`}\n          <span className=\"group relative border-b-3 border-dotted\">\n            {probability}%\n            <span className=\"pointer-events-none absolute bottom-full left-1/2 mb-1 -translate-x-1/2 rounded bg-base-800 px-3 py-1 text-center text-sm text-nowrap text-base-200 opacity-0 shadow-md transition-opacity group-[&:hover]:opacity-100 dark:bg-base-200 dark:text-base-800 dark:shadow-none\">\n              {probability}% chance to catch at\n              <br />\n              full HP with an ordinary\n              <br />\n              Poké Ball in Generation VI+\n            </span>\n          </span>\n          {\")\"}\n        </>\n      ) : (\n        \"Loading...\"\n      )}\n    </p>\n  );\n};\nexport default PokemonCatchRate;\n","export const typeEffectiveness: Record<string, Record<string, number>> = {\n  normal: {\n    fighting: 2,\n    ghost: 0,\n  },\n  fighting: {\n    flying: 2,\n    rock: 0.5,\n    bug: 0.5,\n    psychic: 2,\n    dark: 0.5,\n    fairy: 2,\n  },\n  flying: {\n    fighting: 0.5,\n    ground: 0,\n    rock: 2,\n    bug: 0.5,\n    grass: 0.5,\n    electric: 2,\n    ice: 2,\n  },\n  poison: {\n    fighting: 0.5,\n    poison: 0.5,\n    ground: 2,\n    bug: 0.5,\n    grass: 0.5,\n    psychic: 2,\n    fairy: 0.5,\n  },\n  ground: {\n    poison: 0.5,\n    rock: 0.5,\n    water: 2,\n    grass: 2,\n    electric: 0,\n    ice: 2,\n  },\n  rock: {\n    normal: 0.5,\n    fighting: 2,\n    flying: 0.5,\n    poison: 0.5,\n    ground: 2,\n    steel: 2,\n    fire: 0.5,\n    water: 2,\n    grass: 2,\n  },\n  bug: {\n    fighting: 0.5,\n    flying: 2,\n    ground: 0.5,\n    rock: 2,\n    fire: 2,\n    grass: 0.5,\n  },\n  ghost: {\n    normal: 0,\n    fighting: 0,\n    poison: 0.5,\n    bug: 0.5,\n    ghost: 2,\n    dark: 2,\n  },\n  steel: {\n    normal: 0.5,\n    fighting: 2,\n    flying: 0.5,\n    poison: 0,\n    ground: 2,\n    rock: 0.5,\n    bug: 0.5,\n    steel: 0.5,\n    fire: 2,\n    grass: 0.5,\n    psychic: 0.5,\n    ice: 0.5,\n    dragon: 0.5,\n    fairy: 0.5,\n  },\n  fire: {\n    ground: 2,\n    rock: 2,\n    bug: 0.5,\n    steel: 0.5,\n    fire: 0.5,\n    water: 2,\n    grass: 0.5,\n    ice: 0.5,\n    fairy: 0.5,\n  },\n  water: {\n    steel: 0.5,\n    fire: 0.5,\n    water: 0.5,\n    grass: 2,\n    electric: 2,\n    ice: 0.5,\n  },\n  grass: {\n    flying: 2,\n    poison: 2,\n    ground: 0.5,\n    bug: 2,\n    fire: 2,\n    water: 0.5,\n    grass: 0.5,\n    electric: 0.5,\n    ice: 2,\n  },\n  electric: {\n    flying: 0.5,\n    ground: 2,\n    steel: 0.5,\n    electric: 0.5,\n  },\n  psychic: {\n    fighting: 0.5,\n    bug: 2,\n    ghost: 2,\n    psychic: 0.5,\n    dark: 2,\n  },\n  ice: {\n    fighting: 2,\n    rock: 2,\n    steel: 2,\n    fire: 2,\n    ice: 0.5,\n  },\n  dragon: {\n    fire: 0.5,\n    water: 0.5,\n    grass: 0.5,\n    electric: 0.5,\n    ice: 2,\n    dragon: 2,\n    fairy: 2,\n  },\n  dark: {\n    fighting: 2,\n    bug: 2,\n    ghost: 0.5,\n    psychic: 0,\n    dark: 0.5,\n    fairy: 2,\n  },\n  fairy: {\n    fighting: 0.5,\n    poison: 2,\n    bug: 0.5,\n    steel: 2,\n    dragon: 0,\n    dark: 0.5,\n  },\n};\n","import { typeEffectiveness } from \"@/data/typeEffectiveness.ts\";\n\nconst getTypeEffectivenessData = (types: string[]) => {\n  // An object which will contain all 18 types and the multiplier to which they deal damage to the Pokémon\n  const multipliers: Record<string, number> = {};\n\n  // An object to categorize the types depending on their damage multiplier against the Pokémon\n  const categories: Record<string, { types: string[]; label: string }> = {\n    normal: { types: [], label: \"Damaged normally by\" },\n    weak: { types: [], label: \"Weak to\" },\n    resistant: { types: [], label: \"Resistant to\" },\n    immune: { types: [], label: \"Immune to\" },\n  };\n\n  // Determine the effectiveness and category of each type\n  for (const attackingType of Object.keys(typeEffectiveness)) {\n    // Base multiplier of 1\n    let multiplier = 1;\n\n    // Multiply effectiveness across all the Pokémon's defending types\n    for (const defendingType of types)\n      multiplier *= typeEffectiveness[defendingType]?.[attackingType] ?? 1;\n\n    multipliers[attackingType] = multiplier;\n\n    // Categorize the type based on its effectiveness\n    if (multiplier === 0) categories.immune.types.push(attackingType);\n    else if (multiplier < 1) categories.resistant.types.push(attackingType);\n    else if (multiplier > 1) categories.weak.types.push(attackingType);\n    else categories.normal.types.push(attackingType);\n  }\n\n  return { categories, multipliers };\n};\nexport default getTypeEffectivenessData;\n","import getTypeEffectivenessData from \"@/features/pokemon/utils/getTypeEffectivenessData.ts\";\n\nimport Loader from \"@/components/Loader.tsx\";\nimport TypeDisplay from \"@/components/TypeDisplay.tsx\";\n\ninterface TypesProps {\n  types: string[] | undefined;\n}\n\ninterface CategoryProps {\n  title: string;\n  types: string[];\n  multipliers: Record<string, number>;\n}\n\nconst EffectivenessCategory = ({ title, types, multipliers }: CategoryProps) =>\n  types.length ? (\n    <>\n      <p>{title}:</p>\n\n      {/* List of types from the specific category */}\n      <div className=\"flex flex-wrap gap-1 pt-1 pb-2\">\n        {types.map((type) => (\n          <div key={type} className=\"flex w-34 items-center gap-1 pr-2\">\n            <TypeDisplay type={type} />\n\n            {multipliers[type] === 0.25 ? (\n              // Reduce the X scale when the multiplier is 0.25 because otherwise it would take too much space\n              <span className=\"-ml-0.5 scale-x-90\">{`${multipliers[type]}x`}</span>\n            ) : (\n              <span>{`${multipliers[type]}x`}</span>\n            )}\n          </div>\n        ))}\n      </div>\n    </>\n  ) : null;\n\nconst PokemonTypeEffectiveness = ({ types }: TypesProps) => {\n  if (!types)\n    return (\n      <>\n        <h2 className=\"mb-1 text-lg font-semibold\">Type effectiveness:</h2>\n\n        <div className=\"h-80 w-full rounded-lg bg-base-200 shadow-lg transition-[background-color] dark:bg-base-800 dark:shadow-none\">\n          <Loader size={24} displaysText={true} />\n        </div>\n      </>\n    );\n\n  const { categories, multipliers } = getTypeEffectivenessData(types);\n\n  return (\n    <>\n      <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">\n        Type effectiveness:\n      </h2>\n\n      <div className=\"mb-2 w-full rounded-xl bg-base-200 p-2 shadow-lg transition-[background-color] sm:px-4 dark:bg-base-800 dark:shadow-none\">\n        <p>This Pokémon is:</p>\n\n        {Object.values(categories).map(({ types, label }) => (\n          <EffectivenessCategory\n            key={label}\n            title={label}\n            types={types}\n            multipliers={multipliers}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\nexport default PokemonTypeEffectiveness;\n","export const games: Record<string, { label: string }> = {\n  red: { label: \"Red\" },\n  blue: { label: \"Blue\" },\n  yellow: { label: \"Yellow\" },\n  gold: { label: \"Gold\" },\n  silver: { label: \"Silver\" },\n  crystal: { label: \"Crystal\" },\n  ruby: { label: \"Ruby\" },\n  sapphire: { label: \"Sapphire\" },\n  emerald: { label: \"Emerald\" },\n  firered: { label: \"FireRed\" },\n  leafgreen: { label: \"LeafGreen\" },\n  diamond: { label: \"Diamond\" },\n  pearl: { label: \"Pearl\" },\n  platinum: { label: \"Platinum\" },\n  heartgold: { label: \"HeartGold\" },\n  soulsilver: { label: \"SoulSilver\" },\n  black: { label: \"Black\" },\n  white: { label: \"White\" },\n  \"black-2\": { label: \"Black 2\" },\n  \"white-2\": { label: \"White 2\" },\n  x: { label: \"X\" },\n  y: { label: \"Y\" },\n  \"omega-ruby\": { label: \"Omega Ruby\" },\n  \"alpha-sapphire\": { label: \"Alpha Sapphire\" },\n  sun: { label: \"Sun\" },\n  moon: { label: \"Moon\" },\n  \"ultra-sun\": { label: \"Ultra Sun\" },\n  \"ultra-moon\": { label: \"Ultra Moon\" },\n  \"lets-go-pikachu\": { label: \"Let's Go, Pikachu!\" },\n  \"lets-go-eevee\": { label: \"Let's Go, Eevee!\" },\n  sword: { label: \"Sword\" },\n  shield: { label: \"Shield\" },\n  \"brilliant-diamond\": { label: \"Brilliant Diamond\" },\n  \"shining-pearl\": { label: \"Shining Pearl\" },\n  \"legends-arceus\": { label: \"Legends: Arceus\" },\n  scarlet: { label: \"Scarlet\" },\n  violet: { label: \"Violet\" },\n};\n","import type { NamedAPIResource } from \"pokedex-promise-v2\";\n\nimport { usePokemonDetailsParam } from \"@/features/pokemon/hooks/usePokemonDetailsParam.ts\";\nimport { games } from \"@/data/games.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nimport CollapsingPanel from \"@/components/CollapsingPanel.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface Entry {\n  flavor_text: string;\n  language: NamedAPIResource;\n  version?: NamedAPIResource;\n}\n\ninterface EntriesProps {\n  // Currently pokedex-promise-v2 has a typing bug, so a manual type is used instead\n  // (Usually the correct type is FlavorText[])\n  textEntries: Entry[] | undefined;\n}\n\nconst FlavorTextEntry = ({ entry }: { entry: Entry }) => (\n  <>\n    <span className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n      {/* Display a hardcoded string for the version, with original one as a fallback */}\n      {games[entry.version?.name ?? \"\"]?.label ??\n        capitalize(entry.version?.name ?? \"\")}\n      {\": \"}\n    </span>\n    {entry.flavor_text}\n  </>\n);\n\nconst FlavorTextEntries = ({ textEntries }: EntriesProps) => {\n  const [isOpen, setIsOpen] = usePokemonDetailsParam(\"isDexEntriesPanelOpen\");\n\n  const sortedEntries = textEntries\n    // Filter to display only the english Dex Entries\n    ?.filter((entry) => entry.language.name === \"en\")\n    // Reverse the order to show Dex Entries from newest games first\n    .reverse();\n\n  return (\n    <>\n      <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">Dex Entries:</h2>\n\n      <div className=\"rounded-xl bg-base-200 transition-[background] dark:bg-base-800\">\n        {sortedEntries?.length ? (\n          <>\n            <p\n              className={`${\n                sortedEntries.length > 1 ? \"-mb-2\" : \"pb-2\"\n              } px-2 pt-2 sm:px-4`}\n            >\n              <FlavorTextEntry entry={sortedEntries[0]} />\n            </p>\n\n            {sortedEntries.length > 1 && (\n              <CollapsingPanel\n                label=\"More Dex Entries\"\n                initialIsOpen={isOpen}\n                toggleOpen={() => setIsOpen(isOpen ? undefined : true)}\n              >\n                <ul>\n                  {sortedEntries.slice(1).map((entry) => (\n                    <li\n                      key={entry.version?.name}\n                      className=\"p-2 even:bg-base-500/15 sm:px-4\"\n                    >\n                      <FlavorTextEntry entry={entry} />\n                    </li>\n                  ))}\n                </ul>\n              </CollapsingPanel>\n            )}\n          </>\n        ) : (\n          <div className=\"h-27\">\n            <Loader size={16} />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\nexport default FlavorTextEntries;\n","import type { MoveElement } from \"pokedex-promise-v2\";\n\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport type { ItemResource } from \"@/types/types.ts\";\n\ninterface Moves {\n  label: string;\n  moves: (ItemResource & { level: number })[];\n}\n\ntype Learnset = Record<string, Moves>;\n\nconst filterLearnsetData = (\n  moves: MoveElement[],\n  currentVersionGroup: string,\n) => {\n  const learnset: Learnset = {\n    levelUpMoves: { label: \"Level-Up Moves\", moves: [] },\n    machineMoves: { label: \"TM Moves\", moves: [] },\n    eggMoves: { label: \"Egg Moves\", moves: [] },\n    tutorMoves: { label: \"Tutor Moves\", moves: [] },\n  };\n\n  moves.forEach((move) => {\n    move.version_group_details.forEach((vg) => {\n      if (vg.version_group.name === currentVersionGroup) {\n        const moveData = {\n          id: Number(getIdFromUrl(move.move.url)),\n          name: move.move.name,\n          level: vg.level_learned_at,\n        };\n\n        // Add the move to its respective categories, if applicable\n        switch (vg.move_learn_method.name) {\n          case \"level-up\":\n            learnset.levelUpMoves.moves.push(moveData);\n            break;\n          case \"machine\":\n            learnset.machineMoves.moves.push(moveData);\n            break;\n          case \"egg\":\n            learnset.eggMoves.moves.push(moveData);\n            break;\n          case \"tutor\":\n            learnset.tutorMoves.moves.push(moveData);\n            break;\n        }\n      }\n    });\n  });\n\n  // Sort level-up moves by level\n  learnset.levelUpMoves.moves.sort((a, b) => a.level - b.level);\n\n  return learnset;\n};\nexport default filterLearnsetData;\n","import { Link } from \"@tanstack/react-router\";\r\nimport { ChevronRightIcon } from \"@heroicons/react/24/outline\";\r\n\r\nimport { useMove } from \"@/hooks/usePokeApi.ts\";\r\nimport type { ItemResource } from \"@/types/types.ts\";\r\n\r\nimport TypeDisplay from \"@/components/TypeDisplay.tsx\";\r\nimport MoveCategoryDisplay from \"@/components/MoveCategoryDisplay.tsx\";\r\n\r\ninterface RowProps {\r\n  move: ItemResource & { level: number };\r\n  displayLevel: boolean;\r\n}\r\n\r\nconst PokemonMoveTableRow = ({ move, displayLevel }: RowProps) => {\r\n  const { data: moveData } = useMove(move.id);\r\n\r\n  return (\r\n    <tr className=\"group relative h-8 even:bg-base-500/15 hover:bg-blue-500/20 has-focus:bg-blue-500/20 pointer-coarse:h-12\">\r\n      {/* Invisible Link (has to be the first for the peer class to work) */}\r\n      <td aria-hidden=\"true\" className=\"peer\">\r\n        <Link\r\n          to=\"/moves/$moveId\"\r\n          params={{ moveId: String(move.id) }}\r\n          draggable=\"false\"\r\n          className=\"absolute inset-0\"\r\n        />\r\n      </td>\r\n\r\n      {/* Level at which the move is learned, if it is in the Level-Up Moves table */}\r\n      {displayLevel && <td className=\"min-w-14\">{move.level || \"Evo.\"}</td>}\r\n\r\n      {/* Move name */}\r\n      <td className=\"min-w-36 font-semibold capitalize group-hover:text-blue-600 peer-focus-within:text-blue-600 dark:group-hover:text-blue-400 dark:peer-focus-within:text-blue-400\">\r\n        {move.name.split(\"-\").join(\" \")}\r\n      </td>\r\n\r\n      {/* Move type */}\r\n      <td className=\"pointer-events-none w-26 min-w-26\">\r\n        {moveData ? (\r\n          <TypeDisplay type={moveData.type.name} className=\"rounded-r-none\" />\r\n        ) : (\r\n          <div className=\"h-6 w-26 animate-pulse rounded-l-full bg-base-500/50\" />\r\n        )}\r\n      </td>\r\n\r\n      {/* Move category (physical, special, status) */}\r\n      <td className=\"pointer-events-none w-28 min-w-28\">\r\n        {moveData ? (\r\n          <MoveCategoryDisplay\r\n            category={moveData.damage_class.name}\r\n            className=\"rounded-l-none\"\r\n          />\r\n        ) : (\r\n          <div className=\"h-6 w-26 animate-pulse rounded-r-full bg-base-500/50\" />\r\n        )}\r\n      </td>\r\n\r\n      {/* Move power, if applicable */}\r\n      <td className=\"min-w-16\">{moveData?.power ?? \"-\"}</td>\r\n\r\n      {/* Move accuracy, if applicable */}\r\n      <td className=\"min-w-22\">\r\n        {moveData?.accuracy ? `${moveData?.accuracy}%` : \"-\"}\r\n      </td>\r\n\r\n      {/* Move PP (Power Points) */}\r\n      <td className=\"min-w-6\">{moveData?.pp ?? \"-\"}</td>\r\n\r\n      {/* Arrow indicating that the row is clickable */}\r\n      <td className=\"pointer-events-none scale-75 rounded-lg group-hover:bg-blue-500/25 group-hover:text-blue-600 peer-focus-within:bg-blue-500/25 peer-focus-within:text-blue-600 dark:group-hover:text-blue-400 dark:peer-focus-within:text-blue-400\">\r\n        <ChevronRightIcon className=\"size-8 pointer-coarse:size-12 pointer-coarse:scale-75\" />\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nexport default PokemonMoveTableRow;\r\n","import type { ItemResource } from \"@/types/types.ts\";\r\n\r\nimport PokemonMoveTableRow from \"@/features/pokemon/components/pokemonDetails/learnset/PokemonMoveTableRow.tsx\";\r\n\r\ninterface MovesProps {\r\n  moves: (ItemResource & { level: number })[];\r\n  label: string;\r\n}\r\n\r\nconst PokemonMovesTable = ({ moves, label }: MovesProps) => (\r\n  <>\r\n    <h3 className=\"mt-2 mb-1 pl-3 text-2xl font-bold capitalize sm:pl-5\">\r\n      {label}\r\n    </h3>\r\n\r\n    <div className=\"overflow-x-scroll px-2 pb-3 sm:px-4\">\r\n      {/* Table displaying the learnset from the selected version group */}\r\n      <table className=\"min-w-full text-nowrap\">\r\n        <thead className=\"border-b border-base-500\">\r\n          <tr>\r\n            {/* Empty th because the first element is an invisible Link */}\r\n            <th className=\"w-2 min-w-2\" />\r\n            {label === \"Level-Up Moves\" && (\r\n              <th className=\"min-w-14 pb-1 text-start\">Level</th>\r\n            )}\r\n            <th className=\"min-w-36 pb-1 text-start\">Move</th>\r\n\r\n            <th className=\"w-26 min-w-26 pb-1 text-start\">Type</th>\r\n            <th className=\"w-28 min-w-28 pb-1 text-start\">Category</th>\r\n            <th className=\"min-w-16 pb-1 text-start\">Power</th>\r\n            <th className=\"min-w-22 pb-1 text-start\">Accuracy</th>\r\n            <th className=\"min-w-6 pb-1 text-start\">PP</th>\r\n            {/* Empty th for the arrow at the end */}\r\n            <th className=\"w-6\" />\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {moves.map((move) => (\r\n            <PokemonMoveTableRow\r\n              key={`${move.level}-${move.name}`}\r\n              move={move}\r\n              displayLevel={label === \"Level-Up Moves\"}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </>\r\n);\r\nexport default PokemonMovesTable;\r\n","import type { MoveElement } from \"pokedex-promise-v2\";\n\nimport { usePokemonDetailsParam } from \"@/features/pokemon/hooks/usePokemonDetailsParam.ts\";\nimport filterLearnsetData from \"@/features/pokemon/utils/filterLearnsetData.ts\";\nimport { versionGroups } from \"@/data/versionGroups.ts\";\n\nimport Loader from \"@/components/Loader.tsx\";\nimport Button from \"@/components/button/Button.tsx\";\nimport PokemonMovesTable from \"@/features/pokemon/components/pokemonDetails/learnset/PokemonMovesTable.tsx\";\n\ninterface MovesProps {\n  moves: MoveElement[] | undefined;\n}\n\nconst PokemonMoves = ({ moves }: MovesProps) => {\n  const [versionGroup, setVersionGroup] =\n    usePokemonDetailsParam(\"versionGroup\");\n  // Indexing from 1 instead of 0 since this value can be seen by the user\n  const currentVersionIndex = (versionGroup ?? 1) - 1;\n\n  if (!moves)\n    return (\n      <div className=\"h-60\">\n        <Loader size={24} displaysText={true} />\n      </div>\n    );\n\n  if (!moves?.length)\n    return (\n      <p className=\"p-2 sm:p-4\">\n        There seems to be no learnset data for this Pokémon&apos;s Form. Try\n        checking another Form above.\n      </p>\n    );\n\n  // All version groups that this Pokémon is in\n  const availableVersionGroups = Object.entries(versionGroups).filter(\n    ([group]) =>\n      moves.some((move) =>\n        move.version_group_details.some(\n          (vg) => vg.version_group.name === group,\n        ),\n      ),\n  );\n\n  const [selectedVersionGroup] = availableVersionGroups[currentVersionIndex];\n  const learnset = filterLearnsetData(moves, selectedVersionGroup);\n\n  return (\n    <>\n      {availableVersionGroups.length > 1 && (\n        <div className=\"mb-2 flex flex-nowrap gap-2 overflow-x-scroll p-2 pt-4 sm:px-4\">\n          {/* Buttons to select the game from which to display the data */}\n          {availableVersionGroups.map(([group, { label }], index) => (\n            <Button\n              key={group}\n              onClick={() =>\n                setVersionGroup(index === 0 ? undefined : index + 1)\n              }\n              disabled={currentVersionIndex === index}\n              style={currentVersionIndex === index ? \"indigo\" : \"normal\"}\n              className=\"px-4 text-nowrap capitalize disabled:cursor-default\"\n            >\n              {label}\n            </Button>\n          ))}\n        </div>\n      )}\n\n      {/* Render move categories if they have moves */}\n      {Object.values(learnset)\n        .filter((categoryMoves) => categoryMoves.moves.length)\n        .map((categoryMoves) => (\n          <PokemonMovesTable\n            key={categoryMoves.label}\n            moves={categoryMoves.moves}\n            label={categoryMoves.label}\n          />\n        ))}\n    </>\n  );\n};\nexport default PokemonMoves;\n","import type { Encounter, PokemonEncounter } from \"pokedex-promise-v2\";\n\nimport { games } from \"@/data/games.ts\";\n\ninterface EncounterList {\n  location: string;\n  details: Encounter[];\n}\n\n// Groups Pokémon encounter data by version name\nconst organizePokemonEncounters = (encounters: PokemonEncounter[]) => {\n  const groupedByVersion: Partial<Record<string, EncounterList[]>> = {};\n\n  // Iterate through all encounter locations\n  for (const encounter of encounters) {\n    // Each location has a list of versions with encounter methods and details\n    for (const versionDetail of encounter.version_details) {\n      const versionName = versionDetail.version.name;\n\n      // Skip versions not defined in the games list\n      if (!(versionName in games)) continue;\n\n      // Create the entry for this version if it doesn't exist yet\n      groupedByVersion[versionName] ??= [];\n\n      // Add this location to the correct version group\n      groupedByVersion[versionName].push({\n        location: encounter.location_area.name,\n        details: versionDetail.encounter_details,\n      });\n    }\n  }\n\n  return groupedByVersion;\n};\nexport default organizePokemonEncounters;\n","import { usePokemonLocations } from \"@/hooks/usePokeApi.ts\";\nimport { games } from \"@/data/games.ts\";\n\nimport organizePokemonEncounters from \"@/features/pokemon/utils/organizePokemonEncounters.ts\";\n\nimport Loader from \"@/components/Loader.tsx\";\n\nconst PokemonLocations = ({ id }: { id: number }) => {\n  const { data: encounters } = usePokemonLocations(id);\n\n  if (encounters === undefined)\n    return (\n      <div className=\"h-27\">\n        <Loader size={16} />\n      </div>\n    );\n\n  if (encounters.length === 0)\n    return (\n      <div className=\"p-4\">\n        There seems to be no location data for this Pokémon. Try checking\n        another Pokemon from the same evolution line.\n      </div>\n    );\n\n  // Group encounters based on the version\n  const formattedEncounters = organizePokemonEncounters(encounters);\n\n  return (\n    <div className=\"space-y-4 p-2 sm:px-4\">\n      {Object.entries(games).map(\n        ([versionName, { label }]) =>\n          formattedEncounters[versionName] && (\n            <div key={versionName}>\n              <h2 className=\"text-xl font-bold\">{label}</h2>\n\n              <ul>\n                {formattedEncounters[versionName].map(({ location }) => (\n                  <li key={location} className=\"capitalize\">\n                    {location.split(\"-\").join(\" \")}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ),\n      )}\n    </div>\n  );\n};\nexport default PokemonLocations;\n","import { useEffect } from \"react\";\nimport { createFileRoute } from \"@tanstack/react-router\";\nimport { AxiosError } from \"axios\";\n\nimport { usePokemonDetailsParam } from \"@/features/pokemon/hooks/usePokemonDetailsParam.ts\";\nimport { usePokemon, usePokemonSpecies } from \"@/hooks/usePokeApi.ts\";\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\nimport { playAudio } from \"@/utils/playAudio.ts\";\nimport type { PokemonDetailsParams } from \"@/types/types.ts\";\n\nimport ErrorMessage from \"@/components/error/ErrorMessage.tsx\";\nimport TopButtons from \"@/features/pokemon/components/pokemonDetails/TopButtons.tsx\";\nimport PokemonImage from \"@/features/pokemon/components/pokemonDetails/PokemonImage.tsx\";\nimport ToggleShinyButton from \"@/features/pokemon/components/pokemonDetails/ToggleShinyButton.tsx\";\nimport PokemonCategory from \"@/features/pokemon/components/pokemonDetails/PokemonCategory.tsx\";\nimport PokemonTypesDisplay from \"@/features/pokemon/components/PokemonTypesDisplay.tsx\";\nimport PokemonFormButtons from \"@/features/pokemon/components/pokemonDetails/PokemonFormButtons.tsx\";\nimport PokemonAbilities from \"@/features/pokemon/components/pokemonDetails/PokemonAbilities.tsx\";\nimport PokemonStats from \"@/features/pokemon/components/pokemonDetails/PokemonStats.tsx\";\nimport PokemonEvolutionChain from \"@/features/pokemon/components/pokemonDetails/PokemonEvolutionChain.tsx\";\nimport GenerationText from \"@/components/GenerationText.tsx\";\nimport PokemonCatchRate from \"@/features/pokemon/components/pokemonDetails/PokemonCatchRate.tsx\";\nimport PokemonTypeEffectiveness from \"@/features/pokemon/components/pokemonDetails/PokemonTypeEffectiveness.tsx\";\nimport FlavorTextEntries from \"@/features/pokemon/components/pokemonDetails/FlavorTextEntries.tsx\";\nimport CollapsingPanel from \"@/components/CollapsingPanel.tsx\";\nimport PokemonMoves from \"@/features/pokemon/components/pokemonDetails/learnset/PokemonMoves.tsx\";\nimport PokemonLocations from \"@/features/pokemon/components/pokemonDetails/PokemonLocations.tsx\";\nimport Footer from \"@/components/Footer.tsx\";\n\nconst PokemonDetails = () => {\n  // State specific to this page\n  const [displayShiny, setDisplayShiny] =\n    usePokemonDetailsParam(\"displayShiny\");\n  const [formIndex, setFormIndex] = usePokemonDetailsParam(\"form\");\n  // Indexing from 1 instead of 0 since this value can be seen by the user\n  const currentFormIndex = (formIndex ?? 1) - 1;\n\n  // Panel states\n  const [isLearnsetOpen, setLearnsetOpen] = usePokemonDetailsParam(\n    \"isLearnsetPanelOpen\",\n  );\n  const [isLocationsOpen, setLocationsOpen] = usePokemonDetailsParam(\n    \"isLocationsPanelOpen\",\n  );\n\n  // Fetching data\n  // Pokémon Species using the URL Parameter\n  const { pokemonId } = Route.useParams();\n  const { data: pokemonSpecies, error: errorPS } = usePokemonSpecies(\n    Number(pokemonId),\n  );\n\n  // Pokémon based on the selected Form\n  const { data: pokemon, error: errorP } = usePokemon(\n    currentFormIndex === 0\n      ? Number(pokemonId)\n      : getIdFromUrl(pokemonSpecies?.varieties[currentFormIndex].pokemon.url),\n  );\n\n  // Play the Pokémon's cry when the page first loads, or when the form is changed\n  useEffect(() => {\n    if (!pokemon?.cries.latest) return;\n    const { play, stop } = playAudio(pokemon.cries.latest);\n\n    void play();\n    return () => stop();\n  }, [pokemon?.cries.latest]);\n\n  // Display an error message if there is an error whole fetching data\n  if ((!pokemon || !pokemonSpecies) && (errorPS || errorP))\n    return (\n      <ErrorMessage\n        errors={[errorPS, errorP]\n          .filter((e) => e instanceof AxiosError)\n          .map((e) => e.message)}\n      />\n    );\n\n  return (\n    <>\n      {/* In React 19, you can now render the <title> tag in JSX */}\n      <title>{`Pokédex - ${capitalize(pokemon?.name ?? \"Loading\")}`}</title>\n\n      <TopButtons />\n\n      <div className=\"mx-auto max-w-3xl p-2 pb-4 sm:px-4 sm:pt-32 md:px-0 md:pt-18\">\n        <PokemonImage\n          key={`${currentFormIndex}${displayShiny ? \"-shiny\" : \"\"}`}\n          src={\n            pokemon?.sprites.other.home[\n              // Depending on the displayShiny state, display a different image\n              displayShiny ? \"front_shiny\" : \"front_default\"\n            ] ??\n            // The default image is from Pokémon HOME, with the official artwork as a fallback\n            pokemon?.sprites.other[\"official-artwork\"][\n              displayShiny ? \"front_shiny\" : \"front_default\"\n            ]\n          }\n          alt={pokemon?.name}\n        />\n\n        <div className=\"flex items-end justify-between px-2\">\n          {/* Name */}\n          <h1 className=\"text-2xl font-bold capitalize\">\n            {pokemon?.name.split(\"-\").join(\" \") ?? \"Loading...\"}\n          </h1>\n\n          <ToggleShinyButton\n            displayShiny={displayShiny ?? false}\n            setDisplayShiny={() =>\n              setDisplayShiny(displayShiny ? undefined : true)\n            }\n          />\n        </div>\n\n        <PokemonCategory\n          category={pokemonSpecies?.genera.find(\n            (genus) => genus.language.name === \"en\",\n          )}\n        />\n\n        <PokemonTypesDisplay\n          types={pokemon?.types}\n          className=\"mx-2 my-1 gap-2\"\n        />\n\n        <PokemonFormButtons\n          pokemonSpecies={pokemonSpecies?.varieties}\n          currentForm={currentFormIndex}\n          handleClick={(index) =>\n            setFormIndex(index === 0 ? undefined : index + 1)\n          }\n        />\n\n        <PokemonAbilities abilities={pokemon?.abilities} />\n\n        <PokemonStats pokemonStats={pokemon?.stats} />\n\n        <PokemonEvolutionChain\n          id={getIdFromUrl(pokemonSpecies?.evolution_chain.url)}\n          pokemonName={pokemonSpecies?.name}\n        />\n\n        <GenerationText\n          generation={pokemonSpecies?.generation.name}\n          itemType=\"Pokémon\"\n        />\n\n        <PokemonCatchRate catchRate={pokemonSpecies?.capture_rate} />\n\n        <PokemonTypeEffectiveness\n          types={pokemon?.types.map((type) => type.type.name)}\n        />\n\n        {/* All english Dex descriptions */}\n        <FlavorTextEntries textEntries={pokemonSpecies?.flavor_text_entries} />\n\n        <CollapsingPanel\n          label=\"Learnset\"\n          initialIsOpen={isLearnsetOpen}\n          toggleOpen={() => setLearnsetOpen(isLearnsetOpen ? undefined : true)}\n        >\n          <PokemonMoves moves={pokemon?.moves} />\n        </CollapsingPanel>\n\n        <CollapsingPanel\n          label=\"Locations\"\n          initialIsOpen={isLocationsOpen}\n          toggleOpen={() =>\n            setLocationsOpen(isLocationsOpen ? undefined : true)\n          }\n        >\n          <PokemonLocations id={Number(pokemonId)} />\n        </CollapsingPanel>\n\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport const Route = createFileRoute(\"/pokemon/$pokemonId\")({\n  component: PokemonDetails,\n  validateSearch: (search) => ({ ...search }) as PokemonDetailsParams,\n  loaderDeps: ({ search: { form } }) => ({ form }),\n  loader: ({\n    context: { queryClient, pokeApi },\n    params: { pokemonId },\n    deps: { form },\n  }) => {\n    const pokemonIdAsNumber = Number(pokemonId);\n\n    // Display an error if the Pokémon ID is not a number\n    if (isNaN(pokemonIdAsNumber))\n      throw new Error(\"Pokémon ID must be a number\");\n\n    // Prefetch the Pokémon Species data\n    void queryClient.ensureQueryData({\n      queryFn: () => pokeApi.getPokemonSpeciesByName(pokemonIdAsNumber),\n      queryKey: [\"pokemonSpecies\", pokemonIdAsNumber],\n    });\n\n    // Don't prefetch the Pokémon details if the user has a different Pokémon Form selected,\n    // as the Pokémon ID is located in the Pokémon Species details, which aren't fetched yet\n    if (!form)\n      void queryClient.ensureQueryData({\n        queryFn: () => pokeApi.getPokemonByName(pokemonIdAsNumber),\n        queryKey: [\"pokemon\", pokemonIdAsNumber],\n      });\n  },\n  remountDeps: ({ params }) => params.pokemonId,\n});\n"],"x_google_ignoreList":[0,1,2,5,6],"mappings":"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"}
{"version":3,"file":"_moveId-CdEnk5cV.js","names":["tmDiscs","tmDiscsImage","Loader","MoveDiscImage","t0","$","_c","type","t1","backgroundImage","backgroundPosition","sprite","x","y","Move","MoveStats","t0","$","_c","move","t1","power","accuracy","pp","VerboseEffect","MoveEffect","t0","$","_c","effect","t1","undefined","short_effect","t2","capitalize","MoveTarget","t0","$","_c","target","t1","replace","t2","FlavorText","versionGroupsWithWordBreaks","Set","movesWithWordBreaks","formatFlavorTextEntries","textEntries","moveName","filter","entry","language","name","flavor_text","reverse","map","has","version_group","replace","FlavorText","versionGroups","formatFlavorTextEntries","capitalize","Accordion","Loader","EntriesProps","textEntries","moveName","flavorTextEntry","entry","version_group","name","label","flavor_text","FlavorTextEntries","t0","$","_c","t1","t2","t3","sortedEntries","Symbol","for","length","slice","map","_temp","undefined","t4","t5","useMove","capitalize","ErrorMessage","BackButton","MoveDiscImage","MoveInfoDisplay","MoveStats","MoveEffect","MoveTarget","GenerationText","FlavorTextEntries","Footer","Route","SplitComponent","moveId","useParams","data","move","error","errorM","Number","message","name","type","effect_entries","target","generation","flavor_text_entries","component"],"sources":["../../src/features/moves/components/moveDetails/MoveDiscImage.tsx","../../src/features/moves/components/moveDetails/MoveStats.tsx","../../src/features/moves/components/moveDetails/MoveEffect.tsx","../../src/features/moves/components/moveDetails/MoveTarget.tsx","../../src/features/moves/utils/formatFlavorTextEntries.ts","../../src/features/moves/components/moveDetails/FlavorTextEntries.tsx","../../src/routes/moves/$moveId.tsx?tsr-split=component"],"sourcesContent":["import { tmDiscs } from \"@/data/tmDiscs.ts\";\nimport tmDiscsImage from \"@/assets/tm-discs.webp\";\n\nimport Loader from \"@/components/Loader.tsx\";\n\nconst MoveDiscImage = ({ type }: { type: string | undefined }) =>\n  type ? (\n    <div\n      className=\"my-2 inline-block h-34.25 min-w-33\"\n      style={{\n        backgroundImage: `url(${tmDiscsImage})`,\n        backgroundPosition: `${tmDiscs[type].sprite.x}px ${tmDiscs[type].sprite.y}px`,\n      }}\n    />\n  ) : (\n    // The loader has the same positioning classes as the image to prevent layout shifts\n    <div className=\"my-2 inline-block h-34.25 w-33\">\n      <Loader size={12} />\n    </div>\n  );\nexport default MoveDiscImage;\n","import type { Move } from \"pokedex-promise-v2\";\n\nconst MoveStats = ({ move }: { move: Move | undefined }) => (\n  <div className=\"mt-2 h-20 w-34 rounded-lg bg-base-100 py-1 pl-2 shadow-md transition-[background-color] dark:bg-base-900 dark:shadow-none\">\n    {move ? (\n      <>\n        <p>\n          <span className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n            {\"Power: \"}\n          </span>\n          {move.power ?? \"-\"}\n        </p>\n\n        <p>\n          <span className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n            {\"Accuracy: \"}\n          </span>\n          {move.accuracy ? `${move.accuracy}%` : \"-\"}\n        </p>\n\n        <p>\n          <span className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n            {\"PP: \"}\n          </span>\n          {move.pp}\n        </p>\n      </>\n    ) : (\n      <p>Loading...</p>\n    )}\n  </div>\n);\nexport default MoveStats;\n","import type { VerboseEffect } from \"pokedex-promise-v2\";\n\nconst MoveEffect = ({ effect }: { effect: VerboseEffect[] | undefined }) => (\n  <p className=\"mx-2 mb-2\">\n    {/* Display loading text if the data is fetching, or display a message if there is no data from the API */}\n    {effect === undefined\n      ? \"Loading...\"\n      : (effect[0]?.short_effect ??\n        \"There seems to be no additional information available about this move.\")}\n  </p>\n);\nexport default MoveEffect;\n","import { capitalize } from \"@/utils/capitalize.ts\";\n\nconst MoveTarget = ({ target }: { target: string | undefined }) => (\n  <p className=\"m-2\">\n    {target ? (\n      <>\n        <span className=\"font-bold text-base-700 transition-[color] dark:text-base-300\">\n          Target:\n        </span>\n        {/* Capitalize and add the é accent if the string contains the word \"pokemon\" */}\n        {` ${capitalize(target.replace(\"pokemon\", \"pokémon\"))}`}\n      </>\n    ) : (\n      \"Loading...\"\n    )}\n  </p>\n);\nexport default MoveTarget;\n","import type { FlavorText } from \"pokedex-promise-v2\";\n\n// Removing line breaks is only needed for Gold and Silver & Crystal version groups\nconst versionGroupsWithWordBreaks = new Set([\"gold-silver\", \"crystal\"]);\n\n// Moves that require removing line breaks in their Gold and Silver & Crystal\n// descriptions because they contain the \"\\n\" in the middle of words\nconst movesWithWordBreaks = new Set([\n  \"pound\",\n  \"karate-chop\",\n  \"vice-grip\",\n  \"swords-dance\",\n  \"hydro-pump\",\n  \"surf\",\n  \"drill-peck\",\n  \"submission\",\n  \"strength\",\n  \"growth\",\n  \"razor-leaf\",\n  \"double-team\",\n  \"minimize\",\n  \"focus-energy\",\n  \"crabhammer\",\n  \"slash\",\n  \"aeroblast\",\n  \"encore\",\n  \"cross-chop\",\n  \"mirror-coat\",\n  \"extreme-speed\",\n]);\n\nconst formatFlavorTextEntries = (\n  textEntries: FlavorText[] | undefined | null,\n  moveName: string | undefined,\n) =>\n  textEntries\n    // Filter to display only the english Move Descriptions\n    ?.filter((entry) => entry.language.name === \"en\")\n    // Removes entries that don't actually have the move and just recommend to forget the move\n    .filter(\n      (entry) =>\n        entry.flavor_text !==\n        \"This move can’t be used.\\nIt’s recommended that this move is forgotten.\\nOnce forgotten, this move can’t be remembered.\",\n    )\n    // Reverse order to show Dex Entries from newest games first\n    .reverse()\n    // Remove erroneous line breaks in the specific version groups and for the specific moves\n    .map((entry) => ({\n      ...entry,\n      flavor_text:\n        versionGroupsWithWordBreaks.has(entry.version_group?.name ?? \"\") &&\n        movesWithWordBreaks.has(moveName ?? \"\")\n          ? entry.flavor_text.replace(/\\n/g, \"\")\n          : entry.flavor_text,\n    }));\nexport default formatFlavorTextEntries;\n","import type { FlavorText } from \"pokedex-promise-v2\";\n\nimport { versionGroups } from \"@/data/versionGroups.ts\";\nimport formatFlavorTextEntries from \"@/features/moves/utils/formatFlavorTextEntries.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nimport Accordion from \"@/components/Accordion.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface EntriesProps {\n  textEntries: FlavorText[] | undefined | null;\n  moveName: string | undefined;\n}\n\nconst flavorTextEntry = (entry: FlavorText) => (\n  <>\n    <span className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n      {/* Display a hardcoded string for the version group, with original one as a fallback */}\n      {versionGroups[entry.version_group?.name ?? \"\"]?.label ??\n        capitalize(entry.version_group?.name ?? \"\")}\n      {\": \"}\n    </span>\n    {entry.flavor_text}\n  </>\n);\n\nconst FlavorTextEntries = ({ textEntries, moveName }: EntriesProps) => {\n  const sortedEntries = formatFlavorTextEntries(textEntries, moveName);\n\n  return (\n    <>\n      <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">Descriptions:</h2>\n\n      <div className=\"rounded-xl bg-base-100 transition-[background] dark:bg-base-900\">\n        {sortedEntries?.length ? (\n          <>\n            <p\n              className={`${\n                sortedEntries.length > 1 ? \"-mb-2\" : \"pb-2\"\n              } px-2 pt-2 sm:px-4`}\n            >\n              {flavorTextEntry(sortedEntries[0])}\n            </p>\n\n            {sortedEntries.length > 1 && (\n              <Accordion label=\"More Descriptions\">\n                <ul>\n                  {sortedEntries.slice(1).map((entry) => (\n                    <li\n                      key={entry.version_group?.name}\n                      className=\"p-2 even:bg-base-500/15 sm:px-4\"\n                    >\n                      {flavorTextEntry(entry)}\n                    </li>\n                  ))}\n                </ul>\n              </Accordion>\n            )}\n          </>\n        ) : textEntries === undefined ? (\n          <div className=\"h-27\">\n            <Loader size={16} />\n          </div>\n        ) : (\n          <p className=\"p-2 sm:px-4\">\n            This move doesn&apos;t seem to have any descriptions.\n          </p>\n        )}\n      </div>\n    </>\n  );\n};\nexport default FlavorTextEntries;\n","import { createFileRoute } from \"@tanstack/react-router\";\n\nimport { useMove } from \"@/hooks/usePokeApi.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nimport ErrorMessage from \"@/components/error/ErrorMessage.tsx\";\nimport BackButton from \"@/components/button/BackButton.tsx\";\nimport MoveDiscImage from \"@/features/moves/components/moveDetails/MoveDiscImage.tsx\";\nimport MoveInfoDisplay from \"@/features/moves/components/MoveInfoDisplay.tsx\";\nimport MoveStats from \"@/features/moves/components/moveDetails/MoveStats.tsx\";\nimport MoveEffect from \"@/features/moves/components/moveDetails/MoveEffect.tsx\";\nimport MoveTarget from \"@/features/moves/components/moveDetails/MoveTarget.tsx\";\nimport GenerationText from \"@/components/GenerationText.tsx\";\nimport FlavorTextEntries from \"@/features/moves/components/moveDetails/FlavorTextEntries.tsx\";\nimport Footer from \"@/components/Footer.tsx\";\n\nconst MoveDetails = () => {\n  // Fetching move using the Path Param\n  const { moveId } = Route.useParams();\n  const { data: move, error: errorM } = useMove(Number(moveId));\n\n  // Display an error message if there is an error whole fetching data\n  if (!move && errorM) return <ErrorMessage errors={[errorM.message]} />;\n\n  return (\n    <>\n      {/* In React 19, you can now render the <title> tag in JSX */}\n      <title>{`Pokédex - ${capitalize(move?.name ?? \"Loading\")}`}</title>\n\n      <div className=\"pointer-events-none sticky top-4 z-20 px-2 sm:fixed sm:top-20 sm:px-4\">\n        <BackButton />\n      </div>\n\n      <div className=\"mx-auto max-w-3xl p-2 pb-4 sm:px-4 sm:pt-32 md:px-0 lg:pt-18\">\n        <div className=\"mb-4 flex gap-2\">\n          <MoveDiscImage type={move?.type.name} />\n\n          <div className=\"max-w-[calc(100vw-148px)]\">\n            <h1 className=\"-ml-1 overflow-scroll mask-l-from-98% mask-l-to-100% pr-2 pb-1 pl-1 text-2xl font-bold text-nowrap\">\n              {capitalize(move?.name ?? \"Loading...\")}\n            </h1>\n\n            <MoveInfoDisplay move={move} />\n\n            <MoveStats move={move} />\n          </div>\n        </div>\n\n        <MoveEffect effect={move?.effect_entries} />\n\n        <MoveTarget target={move?.target.name} />\n\n        <GenerationText generation={move?.generation.name} itemType=\"move\" />\n\n        {/* All english move descriptions */}\n        <FlavorTextEntries\n          textEntries={move?.flavor_text_entries}\n          moveName={move?.name}\n        />\n\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport const Route = createFileRoute(\"/moves/$moveId\")({\n  component: MoveDetails,\n  loader: ({ context: { queryClient, pokeApi }, params: { moveId } }) => {\n    const moveIdAsNumber = Number(moveId);\n\n    // Display an error if the Move ID is not a number\n    if (isNaN(moveIdAsNumber)) throw new Error(\"Move ID must be a number\");\n\n    // Prefetch the Move data\n    void queryClient.ensureQueryData({\n      queryFn: () => pokeApi.getMoveByName(moveIdAsNumber),\n      queryKey: [\"move\", moveIdAsNumber],\n    });\n  },\n});\n"],"mappings":"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"}
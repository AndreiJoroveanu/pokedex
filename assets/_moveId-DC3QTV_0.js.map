{"version":3,"file":"_moveId-DC3QTV_0.js","names":["tmDiscs","tmDiscsImage","Loader","MoveDiscImage","t0","$","_c","type","t1","backgroundImage","backgroundPosition","sprite","x","y","Move","MoveStats","t0","$","_c","move","t1","power","accuracy","pp","VerboseEffect","MoveEffect","t0","$","_c","effect","t1","undefined","short_effect","t2","capitalize","MoveTarget","t0","$","_c","target","t1","replace","t2","FlavorText","getIdFromUrl","versionGroupsWithWordBreaks","Set","movesWithWordBreaks","formatFlavorTextEntries","textEntries","moveName","filter","entry","language","name","flavor_text","sort","a","b","version_group","url","map","has","replace","FlavorText","versionGroups","formatFlavorTextEntries","capitalize","CollapsingPanel","Loader","EntriesProps","textEntries","moveName","FlavorTextEntry","t0","$","_c","entry","t1","version_group","name","label","t2","t3","flavor_text","FlavorTextEntries","sortedEntries","Symbol","for","length","slice","map","_temp","undefined","t4","t5","useMove","capitalize","ErrorMessage","BackButton","MoveDiscImage","MoveInfoDisplay","MoveStats","MoveEffect","MoveTarget","GenerationText","FlavorTextEntries","Footer","Route","SplitComponent","moveId","useParams","data","move","error","errorM","Number","message","name","type","effect_entries","target","generation","flavor_text_entries","component"],"sources":["../../src/features/moves/components/moveDetails/MoveDiscImage.tsx","../../src/features/moves/components/moveDetails/MoveStats.tsx","../../src/features/moves/components/moveDetails/MoveEffect.tsx","../../src/features/moves/components/moveDetails/MoveTarget.tsx","../../src/features/moves/utils/formatFlavorTextEntries.ts","../../src/features/moves/components/moveDetails/FlavorTextEntries.tsx","../../src/routes/moves/$moveId.tsx?tsr-split=component"],"sourcesContent":["import { tmDiscs } from \"@/data/tmDiscs.ts\";\nimport tmDiscsImage from \"/tm-discs.webp\";\n\nimport Loader from \"@/components/Loader.tsx\";\n\nconst MoveDiscImage = ({ type }: { type: string | undefined }) =>\n  type ? (\n    <div\n      className=\"my-2 inline-block h-34.25 min-w-33\"\n      style={{\n        backgroundImage: `url(${tmDiscsImage})`,\n        backgroundPosition: `${tmDiscs[type].sprite.x}px ${tmDiscs[type].sprite.y}px`,\n      }}\n    />\n  ) : (\n    // The loader has the same positioning classes as the image to ensure no layout shifts\n    <div className=\"my-2 inline-block h-34.25 w-33\">\n      <Loader size={12} />\n    </div>\n  );\nexport default MoveDiscImage;\n","import type { Move } from \"pokedex-promise-v2\";\r\n\r\nconst MoveStats = ({ move }: { move: Move | undefined }) => (\r\n  <div className=\"mt-2 h-20 w-34 rounded-lg bg-base-200 py-1 pl-2 shadow transition-[background-color] dark:bg-base-800 dark:shadow-none\">\r\n    {move ? (\r\n      <>\r\n        <p>\r\n          <span className=\"font-bold text-base-600 dark:text-base-400\">\r\n            Power:{\" \"}\r\n          </span>\r\n          {move.power ?? \"-\"}\r\n        </p>\r\n\r\n        <p>\r\n          <span className=\"font-bold text-base-600 dark:text-base-400\">\r\n            Accuracy:{\" \"}\r\n          </span>\r\n          {move.accuracy ? `${move.accuracy}%` : \"-\"}\r\n        </p>\r\n\r\n        <p>\r\n          <span className=\"font-bold text-base-600 dark:text-base-400\">\r\n            PP:{\" \"}\r\n          </span>\r\n          {move.pp}\r\n        </p>\r\n      </>\r\n    ) : (\r\n      <p>Loading...</p>\r\n    )}\r\n  </div>\r\n);\r\nexport default MoveStats;\r\n","import type { VerboseEffect } from \"pokedex-promise-v2\";\n\nconst MoveEffect = ({ effect }: { effect: VerboseEffect[] | undefined }) => (\n  <p className=\"mx-2 mb-2\">\n    {/* Display loading text if the data is fetching, or display a message if there is no data from the API */}\n    {effect === undefined\n      ? \"Loading...\"\n      : (effect[0]?.short_effect ??\n        \"There seems to be no additional information available about this move.\")}\n  </p>\n);\nexport default MoveEffect;\n","import { capitalize } from \"@/utils/capitalize.ts\";\n\nconst MoveTarget = ({ target }: { target: string | undefined }) => (\n  <p className=\"m-2\">\n    {target ? (\n      <>\n        <span className=\"font-bold text-base-700 transition-[color] dark:text-base-300\">\n          Target:\n        </span>\n        {/* Capitalize and add the é accent if the string contains the word \"pokemon\" */}\n        {` ${capitalize(target.replace(\"pokemon\", \"pokémon\"))}`}\n      </>\n    ) : (\n      \"Loading...\"\n    )}\n  </p>\n);\nexport default MoveTarget;\n","import type { FlavorText } from \"pokedex-promise-v2\";\n\nimport { getIdFromUrl } from \"@/utils/getIdFromUrl.ts\";\n\n// Removing line breaks is only needed for Gold and Silver & Crystal version groups\nconst versionGroupsWithWordBreaks = new Set([\"gold-silver\", \"crystal\"]);\n\n// Moves that require removing line breaks in their Gold and Silver & Crystal\n// descriptions because they contain the \"\\n\" in the middle of words\nconst movesWithWordBreaks = new Set([\n  \"pound\",\n  \"karate-chop\",\n  \"vice-grip\",\n  \"swords-dance\",\n  \"hydro-pump\",\n  \"surf\",\n  \"drill-peck\",\n  \"submission\",\n  \"strength\",\n  \"growth\",\n  \"razor-leaf\",\n  \"double-team\",\n  \"minimize\",\n  \"focus-energy\",\n  \"crabhammer\",\n  \"slash\",\n  \"aeroblast\",\n  \"encore\",\n  \"cross-chop\",\n  \"mirror-coat\",\n  \"extreme-speed\",\n]);\n\nconst formatFlavorTextEntries = (\n  textEntries: FlavorText[] | undefined | null,\n  moveName: string | undefined,\n) =>\n  textEntries\n    // Filter to display only the english Move Descriptions\n    ?.filter((entry) => entry.language.name === \"en\")\n    // Removes entries that don't actually have the move and just recommend to forget the move\n    .filter(\n      (entry) =>\n        entry.flavor_text !==\n        \"This move can’t be used.\\nIt’s recommended that this move is forgotten.\\nOnce forgotten, this move can’t be remembered.\",\n    )\n    // Manually sort based on the version group ID in reverse order (newer first)\n    .sort(\n      (a, b) =>\n        (getIdFromUrl(b.version_group?.url) ?? 0) -\n        (getIdFromUrl(a.version_group?.url) ?? 0),\n    )\n    // Remove erroneous line breaks in the specific version groups and for the specific moves\n    .map((entry) => ({\n      ...entry,\n      flavor_text:\n        versionGroupsWithWordBreaks.has(entry.version_group?.name ?? \"\") &&\n        moveName &&\n        movesWithWordBreaks.has(moveName)\n          ? entry.flavor_text.replace(/\\n/g, \"\")\n          : entry.flavor_text,\n    }));\nexport default formatFlavorTextEntries;\n","import type { FlavorText } from \"pokedex-promise-v2\";\n\nimport { versionGroups } from \"@/data/versionGroups.ts\";\nimport formatFlavorTextEntries from \"@/features/moves/utils/formatFlavorTextEntries.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nimport CollapsingPanel from \"@/components/CollapsingPanel.tsx\";\nimport Loader from \"@/components/Loader.tsx\";\n\ninterface EntriesProps {\n  textEntries: FlavorText[] | undefined | null;\n  moveName: string | undefined;\n}\n\nconst FlavorTextEntry = ({ entry }: { entry: FlavorText }) => (\n  <>\n    <span className=\"font-bold text-base-600 transition-[color] dark:text-base-400\">\n      {/* Display a hardcoded string for the version group, with original one as a fallback */}\n      {versionGroups[entry.version_group?.name ?? \"\"]?.label ??\n        capitalize(entry.version_group?.name ?? \"\")}\n      {\": \"}\n    </span>\n    {entry.flavor_text}\n  </>\n);\n\nconst FlavorTextEntries = ({ textEntries, moveName }: EntriesProps) => {\n  const sortedEntries = formatFlavorTextEntries(textEntries, moveName);\n\n  return (\n    <>\n      <h2 className=\"mb-1 ml-2 text-lg font-semibold sm:ml-4\">Descriptions:</h2>\n\n      <div className=\"rounded-xl bg-base-200 transition-[background] dark:bg-base-800\">\n        {sortedEntries?.length && moveName ? (\n          <>\n            <p\n              className={`${\n                sortedEntries.length > 1 ? \"-mb-2\" : \"pb-2\"\n              } px-2 pt-2 sm:px-4`}\n            >\n              <FlavorTextEntry entry={sortedEntries[0]} />\n            </p>\n\n            {sortedEntries.length > 1 && (\n              <CollapsingPanel label=\"More Descriptions\">\n                <ul>\n                  {sortedEntries.slice(1).map((entry) => (\n                    <li\n                      key={entry.version_group?.name}\n                      className=\"p-2 even:bg-base-500/15 sm:px-4\"\n                    >\n                      <FlavorTextEntry entry={entry} />\n                    </li>\n                  ))}\n                </ul>\n              </CollapsingPanel>\n            )}\n          </>\n        ) : textEntries === undefined ? (\n          <div className=\"h-27\">\n            <Loader size={16} />\n          </div>\n        ) : (\n          <p className=\"p-2 sm:px-4\">\n            This move doesn&apos;t seem to have any descriptions.\n          </p>\n        )}\n      </div>\n    </>\n  );\n};\nexport default FlavorTextEntries;\n","import { createFileRoute } from \"@tanstack/react-router\";\n\nimport { useMove } from \"@/hooks/usePokeApi.ts\";\nimport { capitalize } from \"@/utils/capitalize.ts\";\n\nimport ErrorMessage from \"@/components/error/ErrorMessage.tsx\";\nimport BackButton from \"@/components/button/BackButton.tsx\";\nimport MoveDiscImage from \"@/features/moves/components/moveDetails/MoveDiscImage.tsx\";\nimport MoveInfoDisplay from \"@/features/moves/components/MoveInfoDisplay.tsx\";\nimport MoveStats from \"@/features/moves/components/moveDetails/MoveStats.tsx\";\nimport MoveEffect from \"@/features/moves/components/moveDetails/MoveEffect.tsx\";\nimport MoveTarget from \"@/features/moves/components/moveDetails/MoveTarget.tsx\";\nimport GenerationText from \"@/components/GenerationText.tsx\";\nimport FlavorTextEntries from \"@/features/moves/components/moveDetails/FlavorTextEntries.tsx\";\nimport Footer from \"@/components/Footer.tsx\";\n\nconst MoveDetails = () => {\n  // Fetching data\n  // Move ID using the URL Parameter\n  const { moveId } = Route.useParams();\n  const { data: move, error: errorM } = useMove(Number(moveId));\n\n  // Display an error message if there is an error whole fetching data\n  if (!move && errorM) return <ErrorMessage errors={[errorM.message]} />;\n\n  return (\n    <>\n      {/* In React 19, you can now render the <title> tag in JSX */}\n      <title>{`Pokédex - ${capitalize(move?.name ?? \"Loading\")}`}</title>\n\n      <div className=\"pointer-events-none sticky top-4 z-20 px-2 sm:fixed sm:top-20 sm:px-4\">\n        <BackButton />\n      </div>\n\n      <div className=\"mx-auto max-w-3xl p-2 pb-4 sm:px-4 sm:pt-32 md:px-0 lg:pt-18\">\n        <div className=\"mb-4 flex gap-2\">\n          <MoveDiscImage type={move?.type.name} />\n\n          <div className=\"max-w-[calc(100vw-148px)]\">\n            <h1 className=\"overflow-scroll pb-1 text-2xl font-bold text-nowrap\">\n              {capitalize(move?.name ?? \"Loading...\")}\n            </h1>\n\n            <MoveInfoDisplay move={move} />\n\n            <MoveStats move={move} />\n          </div>\n        </div>\n\n        <MoveEffect effect={move?.effect_entries} />\n\n        <MoveTarget target={move?.target.name} />\n\n        <GenerationText generation={move?.generation.name} itemType=\"move\" />\n\n        {/* All english move descriptions */}\n        <FlavorTextEntries\n          textEntries={move?.flavor_text_entries}\n          moveName={move?.name}\n        />\n\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport const Route = createFileRoute(\"/moves/$moveId\")({\n  component: MoveDetails,\n  loader: ({ context: { queryClient, pokeApi }, params: { moveId } }) => {\n    const moveIdAsNumber = Number(moveId);\n\n    // Display an error if the Move ID is not a number\n    if (isNaN(moveIdAsNumber)) throw new Error(\"Move ID must be a number\");\n\n    // Prefetch the Move data\n    void queryClient.ensureQueryData({\n      queryFn: () => pokeApi.getMoveByName(moveIdAsNumber),\n      queryKey: [\"move\", moveIdAsNumber],\n    });\n  },\n});\n"],"mappings":"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"}